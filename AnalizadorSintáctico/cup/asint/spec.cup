package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: 
  return getScanner().next_token(); 
:};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal INIBLOQUE, FINBLOQUE, FINDECLARACIONES, PUNTOYCOMA, PUNTO, INIPAR, FINPAR, INIARRAY, FINARRAY, PUNTERO, REFERENCIA, COMA, ARROBA, MAYOR, MAYORIGUAL, MENOR, MENORIGUAL, COMPARACION, DISTINTO, ASIGNACION, POR, ENTRE, AND, OR, MODULO, NOT, MAS, MENOS, IF, ELSE, WHILE, READ, WRITE, NL, NEW, DELETE, CALL, INT, REAL, BOOL, STRING, STRUCT, TYPE, PROC, TRUE, FALSE, NULL, Identificador, Entero, Real, Cadena;   

non terminal programa_tiny, bloque, lista_opt_declaraciones, lista_declaraciones, declaracion, declaracion_variable, declaracion_tipo, declaracion_proc, cabecera_proc, lista_opt_parametros_formales, lista_parametros_formales, parametro_formal, tipo, tipo_array, tipo_puntero, T2, tipo_basico, tipo_registro, tipo_definido, lista_parametros_registro, parametro_registro, lista_opt_instrucciones, lista_instrucciones, instruccion, instruccion_eval, expresion, E0, E1, E2, E3, E4, E5, E6, E7, OP1, OP4, OP5, OP6, instruccion_if, instruccion_else, instruccion_while, instruccion_read, instruccion_write, instruccion_nl, instruccion_new, instruccion_delete, instruccion_call, parametros, lista_opt_parametros, lista_parametros, instruccion_compuesta;


programa_tiny ::= bloque ;
bloque ::= INIBLOQUE lista_opt_declaraciones lista_opt_instrucciones FINBLOQUE ;

lista_opt_declaraciones ::= lista_declaraciones FINDECLARACIONES ;
lista_opt_declaraciones ::= ;

lista_declaraciones ::= lista_declaraciones PUNTOYCOMA declaracion ;
lista_declaraciones ::= declaracion ;

declaracion ::= declaracion_variable ;
declaracion ::= declaracion_tipo ;
declaracion ::= declaracion_proc ;

declaracion_variable ::= tipo Identificador ;
declaracion_tipo ::= TYPE tipo Identificador ;
declaracion_proc ::= cabecera_proc bloque ;
cabecera_proc ::= PROC Identificador INIPAR lista_opt_parametros_formales FINPAR; 

lista_opt_parametros_formales ::= lista_parametros_formales ;
lista_opt_parametros_formales ::= ;

lista_parametros_formales ::= lista_parametros_formales COMA parametro_formal ;
lista_parametros_formales ::= parametro_formal ;

parametro_formal ::= tipo REFERENCIA Identificador ;
parametro_formal ::= tipo Identificador ;

tipo ::= tipo_array ;
tipo_array ::= tipo_array INIARRAY Entero FINARRAY ;
tipo_array ::= tipo_puntero ;

tipo_puntero ::= PUNTERO tipo_puntero ;
tipo_puntero ::= T2 ;

T2 ::= tipo_basico ;
T2 ::= tipo_registro ;
T2 ::= tipo_definido ;

tipo_basico ::= INT ;
tipo_basico ::= REAL ;
tipo_basico ::= BOOL ;
tipo_basico ::= STRING ;
tipo_registro ::= STRUCT INIBLOQUE lista_parametros_registro FINBLOQUE ;
tipo_definido ::= Identificador ;

lista_parametros_registro ::= lista_parametros_registro COMA  parametro_registro ;
lista_parametros_registro ::= parametro_registro ;

parametro_registro ::= tipo Identificador ;

lista_opt_instrucciones ::= lista_instrucciones ;
lista_opt_instrucciones ::= ;

lista_instrucciones ::= lista_instrucciones PUNTOYCOMA instruccion ;
lista_instrucciones ::= instruccion ;


instruccion ::= instruccion_eval ;
instruccion ::= instruccion_if ;
instruccion ::= instruccion_while ;
instruccion ::= instruccion_read ;
instruccion ::= instruccion_write ;
instruccion ::= instruccion_nl ;
instruccion ::= instruccion_new ;
instruccion ::= instruccion_delete ;
instruccion ::= instruccion_call ;
instruccion ::= instruccion_compuesta ;

instruccion_eval ::= ARROBA expresion ; 

expresion ::= E0 ;

E0 ::= E1 ASIGNACION E0 ;
E0 ::= E1;

E1 ::= E1 OP1 E2 ;
E1 ::= E2 ;

E2 ::= E2 MAS E3 ;
E2 ::= E3 MENOS E3 ;
E2 ::= E3 ;

E3 ::= E4 AND E3 ;
E3 ::= E4 OR E4 ;
E3 ::= E4 ;

E4 ::= E4 OP4 E5 ;
E4 ::= E5 ;

E5 ::= OP5 E5 ;
E5 ::= E6 ;

E6 ::= E6 OP6 ;
E6 ::= E7 ;

E7 ::= Entero ;
E7 ::= Real ;
E7 ::= TRUE ;
E7 ::= FALSE ;
E7 ::= NULL ;
E7 ::= Cadena ;
E7 ::= Identificador ;
E7 ::= INIPAR E0 FINPAR ;

OP1 ::= MAYOR ;
OP1 ::= MAYORIGUAL ;
OP1 ::= MENOR ;
OP1 ::= MENORIGUAL ;
OP1 ::= COMPARACION ;
OP1 ::= DISTINTO ;

OP4 ::= POR ;
OP4 ::= ENTRE ;
OP4 ::= MODULO ;

OP5 ::= NOT ;
OP5 ::= MENOS ;

OP6 ::= INIARRAY E0 FINARRAY ;
OP6 ::= PUNTO Identificador ;
OP6 ::= PUNTERO ;

instruccion_if ::= IF expresion bloque instruccion_else ;
instruccion_else ::= ELSE bloque ;
instruccion_else ::= ;               
instruccion_while ::= WHILE expresion bloque ;
instruccion_read ::= READ expresion ;
instruccion_write ::= WRITE expresion ;
instruccion_nl ::= NL ;
instruccion_new ::= NEW expresion ;
instruccion_delete ::= DELETE expresion ;
instruccion_call ::= CALL Identificador parametros ;

parametros ::= INIPAR lista_opt_parametros FINPAR ;

lista_opt_parametros ::= lista_parametros ;
lista_opt_parametros ::= ;               


lista_parametros ::= lista_parametros COMA expresion ;
lista_parametros ::= expresion ;


instruccion_compuesta ::= bloque ;

