options  {
  STATIC=false;
  DEBUG_PARSER=true;
}  
PARSER_BEGIN(AnalizadorSintacticoTiny)
package asint;

public class AnalizadorSintacticoTiny {
    protected void newToken(Token t) {}
}
PARSER_END(AnalizadorSintacticoTiny)

  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:<digitoPositivo>(<digito>)*|"0">} 
  TOKEN:{<#parteDecimal:(<digito>)* <digitoPositivo>|"0">}
  TOKEN:{<#parteExponencial:("e"|"E")(["+","-"])?<parteEntera>>}
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"##"(~["\n"])*>} 

  TOKEN:{<Identificador:(<letra>|"_")(<letra>|<digito>|"_")*>} 
  TOKEN:{<Entero:(["+","-"])?<parteEntera>>}
  TOKEN:{<Real:<Entero>("."<parteDecimal>(<parteExponencial>)?|<parteExponencial>)>}
  TOKEN:{<Cadena:"\""(~["\""])*"\"">}

  TOKEN:{<INT:("i"|"I")("n"|"N")("t"|"T")>}
  TOKEN:{<REAL:("r"|"R")("e"|"E")("a"|"A")("l"|"L")>}
  TOKEN:{<BOOL:("b"|"B")("o"|"O")("o"|"O")("l"|"L")>}
  TOKEN:{<STRING:("s"|"S")("t"|"T")("r"|"R")("i"|"I")("n"|"N")("g"|"G")>}
  TOKEN:{<AND:("a"|"A")("n"|"N")("d"|"D")>}
  TOKEN:{<OR:("o"|"O")("r"|"R")>}
  TOKEN:{<NOT:("n"|"N")("o"|"O")("t"|"T")>}
  TOKEN:{<NULL:("n"|"N")("u"|"U")("l"|"L")("l"|"L")>}
  TOKEN:{<TRUE:("t"|"T")("r"|"R")("u"|"U")("e"|"E")>}
  TOKEN:{<FALSE:("f"|"F")("a"|"A")("l"|"L")("s"|"S")("e"|"E")+>}
  TOKEN:{<PROC:("p"|"P")("r"|"R")("o"|"O")("c"|"C")>}
  TOKEN:{<IF:("i"|"I")("f"|"F")>}
  TOKEN:{<ELSE:("e"|"E")("l"|"L")("s"|"S")("e"|"E")>}
  TOKEN:{<WHILE:("w"|"W")("h"|"H")("i"|"I")("l"|"L")("e"|"E")>}
  TOKEN:{<STRUCT:("s"|"S")("t"|"T")("r"|"R")("u"|"U")("c"|"C")("t"|"T")>}
  TOKEN:{<NEW:("n"|"N")("e"|"E")("w"|"W")>}
  TOKEN:{<DELETE:("d"|"D")("e"|"E")("l"|"L")("e"|"E")("t"|"T")("e"|"E")>}
  TOKEN:{<READ:("r"|"R")("e"|"E")("a"|"A")("d"|"D")>}
  TOKEN:{<WRITE:("w"|"W")("r"|"R")("i"|"I")("t"|"T")("e"|"E")>}
  TOKEN:{<NL:("n"|"N"|"l"|"L")>}
  TOKEN:{<TYPE:("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>}
  TOKEN:{<CALL:("c"|"C")("a"|"A")("l"|"L")("l"|"L")>}
	TOKEN:{<POR:"*">}
	TOKEN:{<ENTRE:"/">}
	TOKEN:{<MAS:"+">}
	TOKEN:{<MENOS:"-">}
	TOKEN:{<MENOR:"<">}
	TOKEN:{<MENORIGUAL:"<=">}
	TOKEN:{<MAYOR:">">}
	TOKEN:{<MAYORIGUAL:">=">}
	TOKEN:{<COMPARACION:"==">}
	TOKEN:{<DISTINTO:"!=">}
	TOKEN:{<ASIGNACION:"=">}
	TOKEN:{<INIPAR:"(">}
	TOKEN:{<FINPAR:")">}
	TOKEN:{<INIBLOQUE:"{">}
	TOKEN:{<FINBLOQUE:"}">}
	TOKEN:{<ARROBA:"@">}
	TOKEN:{<FINDECLARACIONES:"&&">}
	TOKEN:{<PUNTOYCOMA:";">}
	TOKEN:{<INIARRAY:"[">}
	TOKEN:{<FINARRAY:"]">}
	TOKEN:{<PUNTERO:"^">}
	TOKEN:{<MODULO:"%">}
	TOKEN:{<COMA:",">}
	TOKEN:{<REFERENCIA:"&">}
	TOKEN:{<PUNTO:".">}


  void programa_tiny()									: {} {bloque() <EOF>}
  void bloque()  												: {} {"{" lista_opt_declaraciones() lista_opt_instrucciones() "}"}
  void lista_opt_declaraciones()				: {} {lista_declaraciones() "&&" | {}}
  void lista_declaraciones() 						: {} { declaracion() lista_decs()}
  void lista_decs() 										: {} {";" declaracion() lista_decs() | {}}
  void declaracion() 										: {} {declaracion_variable() | declaracion_tipo() | declaracion_proc()}
  void declaracion_variable()						: {} {tipo() <Identificador>}
  void declaracion_tipo() 							: {} { <TYPE> tipo() <Identificador>}
  void declaracion_proc() 							: {} { <PROC> <Identificador> "(" lista_opt_parametros_formales()  ")" bloque()}
  void lista_opt_parametros_formales()	: {} {lista_parametros_formales() | {}}
  void lista_parametros_formales()			: {} {parametro_formal() RECP()}
  void RECP()														: {} {"," parametro_formal() RECP() | {}}
  
	void parametro_formal()               : {} {tipo() RECpf()}
	void RECpf()                          : {} {"&" <Identificador> | <Identificador>}
	void tipo()                           : {} {tipo_basico() | tipo_registro() | tipo_puntero() | tipo_definido() | tipo_array()}
	void tipo_basico()                  	: {} {<INT> | <REAL> | <BOOL> | <STRING>}
	void tipo_registro()                 	: {} {<STRUCT> "{" lista_opt_parametros_registro() "}"}
	void tipo_puntero()                  	: {} {"^" tipo()}
	void tipo_definido()                  : {} {<Identificador>}
	void tipo_array()                    	: {} {tipo_basico() "[" <Entero> "]"}
	void lista_opt_parametros_registro()  : {} {lista_parametros_registro() | {}}
	void lista_parametros_registro()      : {} {parametro_registro() REClpr()}
	void REClpr()                        	: {} {"," parametro_registro() REClpr() | {}}
	void parametro_registro()             : {} {tipo() <Identificador>}
	void lista_opt_instrucciones()       	: {} {lista_instrucciones() | {}}
	void lista_instrucciones()            : {} {instruccion() RECI()}
	void RECI()                          	: {} {";" instruccion() RECI() | {}}
	void instruccion()                   	: {} {instruccion_eval() | instruccion_if() | instruccion_if_else() | instruccion_while() | instruccion_read() | instruccion_write() | instruccion_nl() | instruccion_new() | instruccion_delete() | instruccion_call() | instruccion_compuesta()}
	void instruccion_eval()               : {} {"@" expresion()}
	void expresion()											: {} {E0()}
	void E0()															: {} {E1() "=" E0()}
	void E1()															: {} {E2() RE1()}
	void RE1()														: {} {OP1() E2() RE1() | {}}
	void E2()															: {} {E3() FE2()}
	void FE2()														: {} {"-" E3() | RE2()}
	void RE2()														: {} {"+" E3() RE2() | {}}
	void E3()															: {} {E4() FE3()}
	void FE3()														: {} {<AND> E3() | <OR> E4() | {}}
	void E4()															: {} {E5() RE4()}
	void RE4()														: {} {OP4() E5() RE4() | {}}
	void E5()															: {} {OP5() E5() | E6()}
	void E6()															: {} {E7() RE6()}
	void RE6()														: {} {OP6() RE6() | {}}
	void E7()															: {} {<Entero> | <Real> | <TRUE> | <FALSE> | <NULL> | <Cadena> | <Identificador> | "(" E0() ")"}
	void OP1()														: {} {">" | ">=" | "<" | "<=" | "==" | "!="}
	void OP4()														: {} {"*" | "/" | "%"}
	void OP5()														: {} {<NOT> | "-"}
	void OP6()														: {} {"[" E0() "]" | "." <Identificador> | "^"}
	void instruccion_if()                 : {} {<IF> expresion() bloque()}
	void instruccion_if_else()            : {} {instruccion_if() <ELSE> bloque()}
	void instruccion_while()              : {} {<WHILE> bloque()}
	void instruccion_read()               : {} {<READ> expresion()}
	void instruccion_write()              : {} {<WRITE> expresion()}
	void instruccion_nl()                 : {} {<NL>}
	void instruccion_new()                : {} {<NEW> expresion()}
	void instruccion_delete()             : {} {<DELETE> expresion()}
	void instruccion_call()               : {} {<CALL> <Identificador> parametros()}
	void parametros()                     : {} {"(" lista_opt_parametros() ")"}
	void lista_opt_parametros()           : {} {lista_parametros() | {}}
	void lista_parametros()               : {} {expresion() REClp()}
	void REClp()                          : {} {"," expresion() REClp() | {}}
	void instruccion_compuesta()          : {} {bloque()}
