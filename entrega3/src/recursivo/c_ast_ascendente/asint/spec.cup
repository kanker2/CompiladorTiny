package recursivo.c_ast_ascendente.asint;

import java_cup.runtime.*;
import recursivo.c_ast_ascendente.alex.AnalizadorLexicoTiny;
import recursivo.c_ast_ascendente.alex.UnidadLexica;
import recursivo.c_ast_ascendente.alex.UnidadLexica.StringLocalizado;
import recursivo.c_ast_ascendente.errors.GestionErroresTiny;
import recursivo.asint.ClaseSemanticaTiny;
import recursivo.asint.SintaxisAbstractaTiny.ProgT;
import recursivo.asint.SintaxisAbstractaTiny.Blq;
import recursivo.asint.SintaxisAbstractaTiny.LOptDecs;
import recursivo.asint.SintaxisAbstractaTiny.LDecs;
import recursivo.asint.SintaxisAbstractaTiny.Dec;
import recursivo.asint.SintaxisAbstractaTiny.LOptParamForm;
import recursivo.asint.SintaxisAbstractaTiny.LParamForm;
import recursivo.asint.SintaxisAbstractaTiny.ParamForm;
import recursivo.asint.SintaxisAbstractaTiny.Tipo;
import recursivo.asint.SintaxisAbstractaTiny.LParamReg;
import recursivo.asint.SintaxisAbstractaTiny.ParamReg;
import recursivo.asint.SintaxisAbstractaTiny.LOptInst;
import recursivo.asint.SintaxisAbstractaTiny.LInst;
import recursivo.asint.SintaxisAbstractaTiny.Inst;
import recursivo.asint.SintaxisAbstractaTiny.Exp;
import recursivo.asint.SintaxisAbstractaTiny.LOptParam;
import recursivo.asint.SintaxisAbstractaTiny.LParam;

scan with {: 
  return getScanner().next_token(); 
:};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};
action code {:
  ClaseSemanticaTiny sem = new ClaseSemanticaTiny();
:}

terminal INIBLOQUE, FINBLOQUE, FINDECLARACIONES, PUNTOYCOMA, PUNTO, INIPAR, FINPAR, INIARRAY, FINARRAY, PUNTERO, REFERENCIA, COMA, ARROBA, MAYOR, MAYORIGUAL, MENOR, MENORIGUAL, COMPARACION, DISTINTO, ASIGNACION, POR, ENTRE, AND, OR, MODULO, NOT, MAS, MENOS, IF, ELSE, WHILE, READ, WRITE, NL, NEW, DELETE, CALL, INT, REAL, BOOL, STRING, STRUCT, TYPE, PROC, TRUE, FALSE, NULL;
terminal StringLocalizado Identificador, Entero, Real, Cadena;

non terminal  ProgT programa_tiny;
non terminal  Blq bloque;
non terminal  LOptDecs lista_opt_declaraciones;
non terminal  LDecs lista_declaraciones;
non terminal  Dec declaracion, declaracion_variable, declaracion_tipo, declaracion_proc;
non terminal  LOptParamForm lista_opt_parametros_formales;
non terminal  LParamForm lista_parametros_formales;
non terminal  ParamForm parametro_formal;
non terminal  Tipo tipo, tipo_definido, tipo_registro, tipo_basico, T2, tipo_puntero, tipo_array;
non terminal  LParamReg lista_parametros_registro;
non terminal  ParamReg parametro_registro;
non terminal  LOptInst lista_opt_instrucciones;
non terminal  LInst lista_instrucciones;
non terminal  Inst instruccion, instruccion_eval, instruccion_if, instruccion_if_else, instruccion_while, instruccion_read, instruccion_write, instruccion_nl, instruccion_new, instruccion_delete, instruccion_call, instruccion_compuesta;
non terminal  Exp expresion, E0, E1, E2, E3, E4, E5, E6, E7;
non terminal  LOptParam lista_opt_parametros, parametros;
non terminal  LParam lista_parametros;
non terminal  String OP1, OP4, OP5;


programa_tiny ::= bloque: blq 
	{: RESULT = sem.prog_tiny(blq); :};
bloque ::= INIBLOQUE lista_opt_declaraciones: l_opt_dec lista_opt_instrucciones: l_opt_inst FINBLOQUE 
	{: RESULT = sem.bloque(l_opt_dec,l_opt_inst); :};

lista_opt_declaraciones ::= lista_declaraciones: l_decs FINDECLARACIONES 
	{: RESULT = sem.si_lista_opt_decs(l_decs); :};
lista_opt_declaraciones ::= 
	{: RESULT = sem.no_lista_opt_decs(); :};

lista_declaraciones ::= lista_declaraciones: l_decs PUNTOYCOMA declaracion: dec 
	{: RESULT = sem.muchas_lista_decs(l_decs, dec); :};
lista_declaraciones ::= declaracion: dec 
	{: RESULT = sem.una_lista_decs(dec); :};

declaracion ::= declaracion_variable: dec_var 
	{: RESULT = dec_var; :};
declaracion ::= declaracion_tipo: dec_tipo 
	{: RESULT = dec_tipo; :};
declaracion ::= declaracion_proc: dec_proc 
	{: RESULT = dec_proc; :};

declaracion_variable ::= tipo: t Identificador: id 
	{: RESULT = (Dec)sem.dec_var(t,id.str()); :};
declaracion_tipo ::= TYPE tipo: t Identificador: id 
	{: RESULT = (Dec)sem.dec_tipo(t,id.str()); :};
declaracion_proc ::= PROC Identificador: id INIPAR lista_opt_parametros_formales: l_opt_param_form FINPAR bloque: blq 
	{: RESULT = (Dec)sem.dec_proc(id.str(),l_opt_param_form,blq); :};

lista_opt_parametros_formales ::= lista_parametros_formales: l_param_form 
	{: RESULT = sem.si_lista_opt_param_form(l_param_form); :};
lista_opt_parametros_formales ::= 
	{: RESULT = sem.no_lista_opt_param_form(); :};

lista_parametros_formales ::= lista_parametros_formales: l_param_form COMA parametro_formal: param_form 
	{: RESULT = sem.muchas_lista_param_form(l_param_form, param_form); :};
lista_parametros_formales ::= parametro_formal: param_form 
	{: RESULT = sem.una_lista_param_form(param_form); :};

parametro_formal ::= tipo: t REFERENCIA Identificador: id 
	{: RESULT = sem.param_form_ref(t,id.str()); :};
parametro_formal ::= tipo: t Identificador: id 
	{: RESULT = sem.param_form(t,id.str()); :};

tipo ::= tipo_array: t_arr 
	{: RESULT = t_arr; :};
tipo_array ::= tipo_array: t_arr INIARRAY Entero: num FINARRAY 
	{: RESULT = (Tipo)sem.tipo_array(t_arr,num.str()); :};
tipo_array ::= tipo_puntero: t_punt 
	{: RESULT = t_punt; :};

tipo_puntero ::= PUNTERO tipo_puntero: t_punt 
	{: RESULT = (Tipo)sem.tipo_puntero(t_punt); :};
tipo_puntero ::= T2: t2 
	{: RESULT = t2; :};

T2 ::= tipo_basico: t_bas 
	{: RESULT = t_bas; :};
T2 ::= tipo_registro: t_reg 
	{: RESULT = t_reg; :};
T2 ::= tipo_definido: t_def 
	{: RESULT = t_def; :};

tipo_basico ::= INT 
	{: RESULT = (Tipo)sem.int_t(); :};
tipo_basico ::= REAL 
	{: RESULT = (Tipo)sem.real_t(); :};
tipo_basico ::= BOOL 
	{: RESULT = (Tipo)sem.bool_t(); :};
tipo_basico ::= STRING 
	{: RESULT = (Tipo)sem.string_t(); :};
tipo_registro ::= STRUCT INIBLOQUE lista_parametros_registro: l_param_reg FINBLOQUE 
	{: RESULT = (Tipo)sem.tipo_registro(l_param_reg); :};
tipo_definido ::= Identificador: id 
	{: RESULT = (Tipo)sem.tipo_definido(id.str()); :};

lista_parametros_registro ::= lista_parametros_registro: l_param_reg COMA  parametro_registro: param_reg 
	{: RESULT = sem.muchas_lista_param_reg(l_param_reg,param_reg); :};
lista_parametros_registro ::= parametro_registro: param_reg 
	{: RESULT = sem.una_lista_param_reg(param_reg); :};

parametro_registro ::= tipo: t Identificador: id 
	{: RESULT = sem.param_reg(t,id.str()); :};

lista_opt_instrucciones ::= lista_instrucciones: l_inst 
	{: RESULT = sem.si_lista_opt_inst(l_inst); :};
lista_opt_instrucciones ::= 
	{: RESULT = sem.no_lista_opt_inst(); :};

lista_instrucciones ::= lista_instrucciones: l_inst PUNTOYCOMA instruccion: inst 
	{: RESULT = sem.muchas_lista_inst(l_inst,inst); :};
lista_instrucciones ::= instruccion: inst 
	{: RESULT = sem.una_lista_inst(inst); :};


instruccion ::= instruccion_eval: inst_eval
	{: RESULT = inst_eval; :};
instruccion ::= instruccion_if: inst_if
	{: RESULT = inst_if; :};
instruccion ::= instruccion_if_else: inst_if_else
	{: RESULT = inst_if_else; :};
instruccion ::= instruccion_while: inst_while
	{: RESULT = inst_while; :};
instruccion ::= instruccion_read: inst_read
	{: RESULT = inst_read; :};
instruccion ::= instruccion_write: inst_write
	{: RESULT = inst_write; :};
instruccion ::= instruccion_nl: inst_nl
	{: RESULT = inst_nl; :};
instruccion ::= instruccion_new: inst_new
	{: RESULT = inst_new; :};
instruccion ::= instruccion_delete: inst_delete
	{: RESULT = inst_delete; :};
instruccion ::= instruccion_call: inst_call 
	{: RESULT = inst_call; :};
instruccion ::= instruccion_compuesta: inst_compuesta
	{: RESULT = inst_compuesta; :};

instruccion_eval ::= ARROBA expresion: exp
	{: RESULT = (Inst)sem.inst_eval(exp); :};

expresion ::= E0: exp
	{: RESULT = exp; :};

E0 ::= E1: opnd1 ASIGNACION E0: opnd2
	{: RESULT = sem.asignacion(opnd1, opnd2); :};
E0 ::= E1: exp
	{: RESULT = exp; :};

E1 ::= E1: opnd1 OP1: op E2: opnd2 
	{: RESULT = sem.mkop1(op, opnd1, opnd2); :};
E1 ::= E2: exp
	{: RESULT = exp; :};

E2 ::= E2: opnd1 MAS E3: opnd2
	{: RESULT = sem.suma(opnd1, opnd2); :};
E2 ::= E3: opnd1 MENOS E3:opnd2
	{: RESULT = sem.resta(opnd1, opnd2); :}; 
E2 ::= E3: exp
	{: RESULT = exp; :};

E3 ::= E4: opnd1 AND E3: opnd2 
	{: RESULT = sem.and(opnd1, opnd2); :};
E3 ::= E4: opnd1 OR E4: opnd2
	{: RESULT = sem.or(opnd1, opnd2); :};
E3 ::= E4: exp 
	{: RESULT = exp; :};

E4 ::= E4: opnd1 OP4: op E5: opnd2 
	{: RESULT = sem.mkop4(op, opnd1, opnd2); :};
E4 ::= E5: exp 
	{: RESULT = exp; :};

E5 ::= OP5: op E5: opnd1 
	{: RESULT = sem.mkop5(op, opnd1); :};
E5 ::= E6: exp
	{: RESULT = exp; :};

E6 ::= E6: opnd1 INIARRAY E0: opnd2 FINARRAY
	{: RESULT = sem.indexacion(opnd1, opnd2); :};
E6 ::= E6: opnd1 PUNTO Identificador: id
	{: RESULT = sem.acc_reg(opnd1, id.str()); :};
E6 ::= E6: opnd1 PUNTERO
	{: RESULT = sem.indireccion(opnd1); :};
E6 ::= E7: exp
	{: RESULT = exp; :};

E7 ::= Entero: num
	{: RESULT = (Exp)sem.lit_ent(num.str()).ponFila(num.fila()).ponCol(num.col()); :};
E7 ::= Real: num
	{: RESULT = (Exp)sem.lit_real(num.str()).ponFila(num.fila()).ponCol(num.col()); :};
E7 ::= TRUE
	{: RESULT = sem.true_e(); :};
E7 ::= FALSE
	{: RESULT = sem.false_e(); :};
E7 ::= NULL
	{: RESULT = sem.null_e(); :};
E7 ::= Cadena: s
	{: RESULT = (Exp)sem.cadena(s.str()).ponFila(s.fila()).ponCol(s.col()); :};
E7 ::= Identificador: id
	{: RESULT = (Exp)sem.iden(id.str()).ponFila(id.fila()).ponCol(id.col()); :};
E7 ::= INIPAR E0: exp FINPAR 
	{: RESULT = exp; :};

OP1 ::= MAYOR 
	{: RESULT = ">"; :};
OP1 ::= MAYORIGUAL 
	{: RESULT = ">="; :};
OP1 ::= MENOR
	{: RESULT = "<"; :};
OP1 ::= MENORIGUAL 
	{: RESULT = "<="; :};
OP1 ::= COMPARACION 
	{: RESULT = "=="; :};
OP1 ::= DISTINTO 
	{: RESULT = "!="; :};

OP4 ::= POR 
	{: RESULT = "*"; :};
OP4 ::= ENTRE 
	{: RESULT = "/"; :};
OP4 ::= MODULO 
	{: RESULT = "%"; :};

OP5 ::= NOT 
	{: RESULT = "not"; :};
OP5 ::= MENOS
	{: RESULT = "-"; :};


instruccion_if ::= IF expresion: exp bloque: blq 
	{: RESULT = sem.inst_if(exp, blq); :};
instruccion_if_else ::= IF expresion: exp bloque: blq1 ELSE bloque: blq2 
	{: RESULT = sem.inst_if_else(exp, blq1, blq2); :};
instruccion_while ::= WHILE expresion: exp bloque: blq
	{: RESULT = sem.inst_while(exp, blq); :}; 
instruccion_read ::= READ expresion: exp
	{: RESULT = sem.inst_read(exp); :}; 
instruccion_write ::= WRITE expresion: exp
	{: RESULT = sem.inst_write(exp); :};
instruccion_nl ::= NL 
	{: RESULT = sem.inst_nl(); :};
instruccion_new ::= NEW expresion: exp
	{: RESULT = sem.inst_new(exp); :};
instruccion_delete ::= DELETE expresion: exp
	{: RESULT = sem.inst_delete(exp); :};
instruccion_call ::= CALL Identificador: id parametros: param 
	{: RESULT = sem.inst_call(id.str(), param); :}; 

parametros ::= INIPAR lista_opt_parametros: l_opt_param FINPAR
	{: RESULT = l_opt_param; :};

lista_opt_parametros ::= lista_parametros: l_param
	{: RESULT = sem.si_lista_opt_param(l_param); :};
lista_opt_parametros ::= 
	{: RESULT = sem.no_lista_opt_param(); :};               


lista_parametros ::= lista_parametros: l_param COMA expresion: exp
	{: RESULT = sem.muchas_lista_param(l_param, exp); :}; 
lista_parametros ::= expresion: exp 
	{: RESULT = sem.una_lista_param(exp); :};


instruccion_compuesta ::= bloque: blq
	{: RESULT = sem.inst_comp(blq); :};

