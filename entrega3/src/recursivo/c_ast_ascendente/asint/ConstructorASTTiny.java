
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Apr 08 04:24:21 CEST 2024
//----------------------------------------------------

package recursivo.c_ast_ascendente.asint;

import java_cup.runtime.*;
import recursivo.c_ast_ascendente.alex.AnalizadorLexicoTiny;
import recursivo.c_ast_ascendente.alex.UnidadLexica;
import recursivo.c_ast_ascendente.alex.UnidadLexica.StringLocalizado;
import recursivo.c_ast_ascendente.errors.GestionErroresTiny;
import recursivo.asint.ClaseSemanticaTiny;
import recursivo.asint.SintaxisAbstractaTiny.ProgT;
import recursivo.asint.SintaxisAbstractaTiny.Blq;
import recursivo.asint.SintaxisAbstractaTiny.LOptDecs;
import recursivo.asint.SintaxisAbstractaTiny.LDecs;
import recursivo.asint.SintaxisAbstractaTiny.Dec;
import recursivo.asint.SintaxisAbstractaTiny.LOptParamForm;
import recursivo.asint.SintaxisAbstractaTiny.LParamForm;
import recursivo.asint.SintaxisAbstractaTiny.ParamForm;
import recursivo.asint.SintaxisAbstractaTiny.Tipo;
import recursivo.asint.SintaxisAbstractaTiny.LParamReg;
import recursivo.asint.SintaxisAbstractaTiny.ParamReg;
import recursivo.asint.SintaxisAbstractaTiny.LOptInst;
import recursivo.asint.SintaxisAbstractaTiny.LInst;
import recursivo.asint.SintaxisAbstractaTiny.Inst;
import recursivo.asint.SintaxisAbstractaTiny.Exp;
import recursivo.asint.SintaxisAbstractaTiny.LOptParam;
import recursivo.asint.SintaxisAbstractaTiny.LParam;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Apr 08 04:24:21 CEST 2024
  */
public class ConstructorASTTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTTiny() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\004\000\002\010\005\000\002" +
    "\011\010\000\002\012\003\000\002\012\002\000\002\013" +
    "\005\000\002\013\003\000\002\014\005\000\002\014\004" +
    "\000\002\015\003\000\002\023\006\000\002\023\003\000" +
    "\002\022\004\000\002\022\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\017\006" +
    "\000\002\016\003\000\002\024\005\000\002\024\003\000" +
    "\002\025\004\000\002\026\003\000\002\026\002\000\002" +
    "\027\005\000\002\027\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\031\004\000\002\044\003\000\002\045\005\000\002\045" +
    "\003\000\002\046\005\000\002\046\003\000\002\047\005" +
    "\000\002\047\005\000\002\047\003\000\002\050\005\000" +
    "\002\050\005\000\002\050\003\000\002\051\005\000\002" +
    "\051\003\000\002\052\004\000\002\052\003\000\002\053" +
    "\006\000\002\053\005\000\002\053\004\000\002\053\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\005\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\062\003\000\002\062\003\000\002" +
    "\032\005\000\002\033\007\000\002\034\005\000\002\035" +
    "\004\000\002\036\004\000\002\037\003\000\002\040\004" +
    "\000\002\041\004\000\002\042\005\000\002\056\005\000" +
    "\002\055\003\000\002\055\002\000\002\057\005\000\002" +
    "\057\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\004\004\004\001\002\000\052\004\ufffd\005" +
    "\ufffd\015\027\020\ufffd\040\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\013\052\034\053" +
    "\032\054\024\055\011\056\023\057\030\063\020\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002\000\004\063\236\001\002\000\004" +
    "\004\226\001\002\000\010\013\223\016\uffee\063\uffee\001" +
    "\002\000\010\013\uffe6\016\uffe6\063\uffe6\001\002\000\030" +
    "\004\004\005\uffdc\020\106\040\073\042\066\043\063\044" +
    "\074\045\107\046\102\047\104\050\065\001\002\000\006" +
    "\006\ufff9\007\ufff9\001\002\000\010\013\uffe9\016\uffe9\063" +
    "\uffe9\001\002\000\010\013\uffe8\016\uffe8\063\uffe8\001\002" +
    "\000\010\013\uffe1\016\uffe1\063\uffe1\001\002\000\006\006" +
    "\ufff8\007\ufff8\001\002\000\006\006\ufffb\007\ufffb\001\002" +
    "\000\020\015\027\051\013\052\034\053\032\054\024\055" +
    "\011\063\020\001\002\000\010\013\uffe3\016\uffe3\063\uffe3" +
    "\001\002\000\010\013\uffea\016\uffea\063\uffea\001\002\000" +
    "\010\013\uffe7\016\uffe7\063\uffe7\001\002\000\020\015\027" +
    "\051\013\052\034\053\032\054\024\055\011\063\020\001" +
    "\002\000\004\063\041\001\002\000\006\006\ufffa\007\ufffa" +
    "\001\002\000\010\013\uffe4\016\uffe4\063\uffe4\001\002\000" +
    "\010\013\uffec\016\uffec\063\uffec\001\002\000\010\013\uffe5" +
    "\016\uffe5\063\uffe5\001\002\000\006\006\037\007\036\001" +
    "\002\000\024\015\027\051\013\052\034\053\032\054\024" +
    "\055\011\056\023\057\030\063\020\001\002\000\030\004" +
    "\ufffe\005\ufffe\020\ufffe\040\ufffe\042\ufffe\043\ufffe\044\ufffe" +
    "\045\ufffe\046\ufffe\047\ufffe\050\ufffe\001\002\000\006\006" +
    "\ufffc\007\ufffc\001\002\000\004\011\042\001\002\000\022" +
    "\012\ufff3\015\027\051\013\052\034\053\032\054\024\055" +
    "\011\063\020\001\002\000\006\012\ufff4\017\054\001\002" +
    "\000\006\012\ufff1\017\ufff1\001\002\000\006\016\051\063" +
    "\052\001\002\000\004\012\047\001\002\000\004\004\004" +
    "\001\002\000\006\006\ufff5\007\ufff5\001\002\000\004\063" +
    "\053\001\002\000\006\012\uffef\017\uffef\001\002\000\006" +
    "\012\ufff0\017\ufff0\001\002\000\020\015\027\051\013\052" +
    "\034\053\032\054\024\055\011\063\020\001\002\000\006" +
    "\012\ufff2\017\ufff2\001\002\000\010\013\uffeb\016\uffeb\063" +
    "\uffeb\001\002\000\004\063\060\001\002\000\006\006\ufff6" +
    "\007\ufff6\001\002\000\006\005\uffcf\007\uffcf\001\002\000" +
    "\006\005\uffd3\007\uffd3\001\002\000\026\011\123\035\113" +
    "\037\111\060\120\061\131\062\134\063\116\064\114\065" +
    "\132\066\130\001\002\000\006\005\uffd0\007\uffd0\001\002" +
    "\000\004\063\211\001\002\000\026\011\123\035\113\037" +
    "\111\060\120\061\131\062\134\063\116\064\114\065\132" +
    "\066\130\001\002\000\006\005\uffd6\007\uffd6\001\002\000" +
    "\006\005\uffda\007\uffda\001\002\000\006\005\uffd9\007\uffd9" +
    "\001\002\000\006\005\uff99\007\uff99\001\002\000\026\011" +
    "\123\035\113\037\111\060\120\061\131\062\134\063\116" +
    "\064\114\065\132\066\130\001\002\000\026\011\123\035" +
    "\113\037\111\060\120\061\131\062\134\063\116\064\114" +
    "\065\132\066\130\001\002\000\006\005\uffd4\007\uffd4\001" +
    "\002\000\006\005\uffd2\007\uffd2\001\002\000\006\005\uffd8" +
    "\007\uffd8\001\002\000\006\005\uffdd\007\200\001\002\000" +
    "\006\005\uffd1\007\uffd1\001\002\000\026\011\123\035\113" +
    "\037\111\060\120\061\131\062\134\063\116\064\114\065" +
    "\132\066\130\001\002\000\004\005\176\001\002\000\026" +
    "\011\123\035\113\037\111\060\120\061\131\062\134\063" +
    "\116\064\114\065\132\066\130\001\002\000\006\005\uffd7" +
    "\007\uffd7\001\002\000\026\011\123\035\113\037\111\060" +
    "\120\061\131\062\134\063\116\064\114\065\132\066\130" +
    "\001\002\000\006\005\uffa2\007\uffa2\001\002\000\006\005" +
    "\uffd5\007\uffd5\001\002\000\026\011\uffa8\035\uffa8\037\uffa8" +
    "\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\001\002\000\006\005\uffce\007\uffce\001\002\000\026" +
    "\011\uffa9\035\uffa9\037\uffa9\060\uffa9\061\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\065\uffa9\066\uffa9\001\002\000\060\004\uffba" +
    "\005\uffba\007\uffba\010\uffba\012\uffba\013\uffba\014\uffba\015" +
    "\uffba\017\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034" +
    "\uffba\036\uffba\037\uffba\001\002\000\060\004\uffbb\005\uffbb" +
    "\007\uffbb\010\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\017" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036" +
    "\uffbb\037\uffbb\001\002\000\060\004\uffb4\005\uffb4\007\uffb4" +
    "\010\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\017\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\036\uffb4\037" +
    "\uffb4\001\002\000\060\004\uffbf\005\uffbf\007\uffbf\010\167" +
    "\012\uffbf\013\171\014\uffbf\015\170\017\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\036\uffbf\037\uffbf\001" +
    "\002\000\060\004\uffb8\005\uffb8\007\uffb8\010\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\017\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\034\uffb8\036\uffb8\037\uffb8\001\002\000" +
    "\052\004\uffc1\005\uffc1\007\uffc1\012\uffc1\014\uffc1\017\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\036\uffc1" +
    "\037\uffc1\001\002\000\052\004\uffc3\005\uffc3\007\uffc3\012" +
    "\uffc3\014\uffc3\017\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\162\031\160\032\157\033" +
    "\163\034\161\036\uffc3\037\uffc3\001\002\000\026\011\123" +
    "\035\113\037\111\060\120\061\131\062\134\063\116\064" +
    "\114\065\132\066\130\001\002\000\040\004\uffc6\005\uffc6" +
    "\007\uffc6\012\uffc6\014\uffc6\017\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\036\uffc6\037\152" +
    "\001\002\000\036\004\uffc9\005\uffc9\007\uffc9\012\uffc9\014" +
    "\uffc9\017\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\036\147\001\002\000\034\004\uffcb\005" +
    "\uffcb\007\uffcb\012\uffcb\014\uffcb\017\uffcb\021\144\022\137" +
    "\023\143\024\136\025\145\026\142\027\140\001\002\000" +
    "\014\004\uffcd\005\uffcd\007\uffcd\012\uffcd\017\uffcd\001\002" +
    "\000\060\004\uffb5\005\uffb5\007\uffb5\010\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5\001\002\000\060" +
    "\004\uffb7\005\uffb7\007\uffb7\010\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\036\uffb7\037\uffb7\001\002\000\060\004\uffb9" +
    "\005\uffb9\007\uffb9\010\uffb9\012\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\036\uffb9\037\uffb9\001\002\000\026\011\123\035\113" +
    "\037\111\060\120\061\131\062\134\063\116\064\114\065" +
    "\132\066\130\001\002\000\060\004\uffb6\005\uffb6\007\uffb6" +
    "\010\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\017\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6\037" +
    "\uffb6\001\002\000\052\004\uffc0\005\uffc0\007\uffc0\012\uffc0" +
    "\014\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\036\uffc0\037\uffc0\001\002\000\026\011\uffaf\035" +
    "\uffaf\037\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf" +
    "\065\uffaf\066\uffaf\001\002\000\026\011\uffb1\035\uffb1\037" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\066\uffb1\001\002\000\026\011\123\035\113\037\111\060" +
    "\120\061\131\062\134\063\116\064\114\065\132\066\130" +
    "\001\002\000\026\011\123\035\113\037\111\060\120\061" +
    "\131\062\134\063\116\064\114\065\132\066\130\001\002" +
    "\000\026\011\uffad\035\uffad\037\uffad\060\uffad\061\uffad\062" +
    "\uffad\063\uffad\064\uffad\065\uffad\066\uffad\001\002\000\026" +
    "\011\uffb0\035\uffb0\037\uffb0\060\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\uffb0\066\uffb0\001\002\000\026\011\uffb2" +
    "\035\uffb2\037\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064" +
    "\uffb2\065\uffb2\066\uffb2\001\002\000\026\011\uffae\035\uffae" +
    "\037\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065" +
    "\uffae\066\uffae\001\002\000\036\004\uffca\005\uffca\007\uffca" +
    "\012\uffca\014\uffca\017\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\036\147\001\002\000\026" +
    "\011\123\035\113\037\111\060\120\061\131\062\134\063" +
    "\116\064\114\065\132\066\130\001\002\000\036\004\uffc8" +
    "\005\uffc8\007\uffc8\012\uffc8\014\uffc8\017\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\036\uffc8" +
    "\001\002\000\016\004\uffcc\005\uffcc\007\uffcc\012\uffcc\014" +
    "\uffcc\017\uffcc\001\002\000\026\011\123\035\113\037\111" +
    "\060\120\061\131\062\134\063\116\064\114\065\132\066" +
    "\130\001\002\000\036\004\uffc7\005\uffc7\007\uffc7\012\uffc7" +
    "\014\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\036\uffc7\001\002\000\004\012\155" +
    "\001\002\000\060\004\uffb3\005\uffb3\007\uffb3\010\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\017\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\036\uffb3\037\uffb3\001\002" +
    "\000\026\011\123\035\113\037\111\060\120\061\131\062" +
    "\134\063\116\064\114\065\132\066\130\001\002\000\026" +
    "\011\123\035\113\037\111\060\120\061\131\062\134\063" +
    "\116\064\114\065\132\066\130\001\002\000\026\011\uffab" +
    "\035\uffab\037\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064" +
    "\uffab\065\uffab\066\uffab\001\002\000\026\011\uffaa\035\uffaa" +
    "\037\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065" +
    "\uffaa\066\uffaa\001\002\000\026\011\uffac\035\uffac\037\uffac" +
    "\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066" +
    "\uffac\001\002\000\026\011\123\035\113\037\111\060\120" +
    "\061\131\062\134\063\116\064\114\065\132\066\130\001" +
    "\002\000\046\004\uffc4\005\uffc4\007\uffc4\012\uffc4\014\uffc4" +
    "\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\162\031\160\034\161\036\uffc4\037\uffc4" +
    "\001\002\000\040\004\uffc5\005\uffc5\007\uffc5\012\uffc5\014" +
    "\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\036\uffc5\037\uffc5\001\002\000\052\004" +
    "\uffc2\005\uffc2\007\uffc2\012\uffc2\014\uffc2\017\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\036\uffc2\037\uffc2" +
    "\001\002\000\004\063\174\001\002\000\060\004\uffbc\005" +
    "\uffbc\007\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\017\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\036\uffbc\037\uffbc\001\002\000\026\011\123\035\113\037" +
    "\111\060\120\061\131\062\134\063\116\064\114\065\132" +
    "\066\130\001\002\000\004\014\173\001\002\000\060\004" +
    "\uffbe\005\uffbe\007\uffbe\010\uffbe\012\uffbe\013\uffbe\014\uffbe" +
    "\015\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\036\uffbe\037\uffbe\001\002\000\060\004\uffbd\005" +
    "\uffbd\007\uffbd\010\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\036\uffbd\037\uffbd\001\002\000\006\005\uffa0\007\uffa0\001" +
    "\002\000\014\002\uffff\005\uffff\006\uffff\007\uffff\041\uffff" +
    "\001\002\000\006\005\uffa1\007\uffa1\001\002\000\026\004" +
    "\004\020\106\040\073\042\066\043\063\044\074\045\107" +
    "\046\102\047\104\050\065\001\002\000\006\005\uffdb\007" +
    "\uffdb\001\002\000\006\005\uffa3\007\uffa3\001\002\000\004" +
    "\004\004\001\002\000\010\005\uffa7\007\uffa7\041\205\001" +
    "\002\000\004\004\004\001\002\000\006\005\uffa6\007\uffa6" +
    "\001\002\000\004\004\004\001\002\000\006\005\uffa5\007" +
    "\uffa5\001\002\000\004\011\213\001\002\000\006\005\uff9f" +
    "\007\uff9f\001\002\000\030\011\123\012\uff9c\035\113\037" +
    "\111\060\120\061\131\062\134\063\116\064\114\065\132" +
    "\066\130\001\002\000\006\012\uff9a\017\uff9a\001\002\000" +
    "\004\012\221\001\002\000\006\012\uff9d\017\217\001\002" +
    "\000\026\011\123\035\113\037\111\060\120\061\131\062" +
    "\134\063\116\064\114\065\132\066\130\001\002\000\006" +
    "\012\uff9b\017\uff9b\001\002\000\006\005\uff9e\007\uff9e\001" +
    "\002\000\006\005\uffa4\007\uffa4\001\002\000\004\064\224" +
    "\001\002\000\004\014\225\001\002\000\010\013\uffed\016" +
    "\uffed\063\uffed\001\002\000\020\015\027\051\013\052\034" +
    "\053\032\054\024\055\011\063\020\001\002\000\006\005" +
    "\uffdf\017\uffdf\001\002\000\006\005\234\017\233\001\002" +
    "\000\004\063\232\001\002\000\006\005\uffde\017\uffde\001" +
    "\002\000\020\015\027\051\013\052\034\053\032\054\024" +
    "\055\011\063\020\001\002\000\010\013\uffe2\016\uffe2\063" +
    "\uffe2\001\002\000\006\005\uffe0\017\uffe0\001\002\000\006" +
    "\006\ufff7\007\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\006\002\004\003\005\001\001\000\034\004" +
    "\013\005\034\006\021\007\030\010\014\011\020\015\007" +
    "\016\025\017\016\020\015\021\024\022\032\023\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\071\026\102\027\077\030\067" +
    "\031\070\032\076\033\104\034\066\035\107\036\074\037" +
    "\061\040\075\041\100\042\063\043\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\056" +
    "\016\025\017\016\020\015\021\024\022\032\023\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\025\017\016\020\015\021\024\022\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\006\037\007\030\010\014\011\020\015\007\016\025" +
    "\017\016\020\015\021\024\022\032\023\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\012\045\013\042\014\043\015\044\016\025\017\016\020" +
    "\015\021\024\022\032\023\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\014\054\015" +
    "\044\016\025\017\016\020\015\021\024\022\032\023\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\044\221\045\126\046\125\047\124\050\123\051" +
    "\121\052\120\053\116\054\114\062\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\044\206\045\126\046" +
    "\125\047\124\050\123\051\121\052\120\053\116\054\114" +
    "\062\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\044\202\045\126" +
    "\046\125\047\124\050\123\051\121\052\120\053\116\054" +
    "\114\062\132\001\001\000\026\044\201\045\126\046\125" +
    "\047\124\050\123\051\121\052\120\053\116\054\114\062" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\044" +
    "\176\045\126\046\125\047\124\050\123\051\121\052\120" +
    "\053\116\054\114\062\132\001\001\000\002\001\001\000" +
    "\026\044\174\045\126\046\125\047\124\050\123\051\121" +
    "\052\120\053\116\054\114\062\132\001\001\000\002\001" +
    "\001\000\026\044\111\045\126\046\125\047\124\050\123" +
    "\051\121\052\120\053\116\054\114\062\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\155\001\001\000\024\045" +
    "\153\046\125\047\124\050\123\051\121\052\120\053\116" +
    "\054\114\062\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\052" +
    "\134\053\116\054\114\062\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\045\150\046\125\047\124\050\123\051\121\052\120" +
    "\053\116\054\114\062\132\001\001\000\020\047\145\050" +
    "\123\051\121\052\120\053\116\054\114\062\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\050\147\051\121" +
    "\052\120\053\116\054\114\062\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\050\152\051\121\052\120" +
    "\053\116\054\114\062\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\052\165\053\116" +
    "\054\114\062\132\001\001\000\016\050\164\051\121\052" +
    "\120\053\116\054\114\062\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\051\163\052" +
    "\120\053\116\054\114\062\132\001\001\000\004\061\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\045\171\046\125\047\124" +
    "\050\123\051\121\052\120\053\116\054\114\062\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\071\030\200\031\070\032\076\033\104\034\066" +
    "\035\107\036\074\037\061\040\075\041\100\042\063\043" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\203\001\001\000\002\001\001\000\004\003\205\001" +
    "\001\000\002\001\001\000\004\003\207\001\001\000\002" +
    "\001\001\000\004\056\211\001\001\000\002\001\001\000" +
    "\032\044\213\045\126\046\125\047\124\050\123\051\121" +
    "\052\120\053\116\054\114\055\214\057\215\062\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\044\217\045\126\046\125\047\124\050\123\051" +
    "\121\052\120\053\116\054\114\062\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\015\230" +
    "\016\025\017\016\020\015\021\024\022\032\023\011\024" +
    "\227\025\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\230\016" +
    "\025\017\016\020\015\021\024\022\032\023\011\025\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTTiny$actions {


  ClaseSemanticaTiny sem = new ClaseSemanticaTiny();

  private final ConstructorASTTiny parser;

  /** Constructor */
  CUP$ConstructorASTTiny$actions(ConstructorASTTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTTiny$do_action_part00000000(
    int                        CUP$ConstructorASTTiny$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTTiny$parser,
    java.util.Stack            CUP$ConstructorASTTiny$stack,
    int                        CUP$ConstructorASTTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTTiny$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa_tiny ::= bloque 
            {
              ProgT RESULT =null;
		Blq blq = (Blq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.prog_tiny(blq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("programa_tiny",0, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa_tiny EOF 
            {
              Object RESULT =null;
		ProgT start_val = (ProgT)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTTiny$parser.done_parsing();
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= INIBLOQUE lista_opt_declaraciones lista_opt_instrucciones FINBLOQUE 
            {
              Blq RESULT =null;
		LOptDecs l_opt_dec = (LOptDecs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		LOptInst l_opt_inst = (LOptInst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.bloque(l_opt_dec,l_opt_inst); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("bloque",1, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_opt_declaraciones ::= lista_declaraciones FINDECLARACIONES 
            {
              LOptDecs RESULT =null;
		LDecs l_decs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.si_lista_opt_decs(l_decs); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_opt_declaraciones",2, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_opt_declaraciones ::= 
            {
              LOptDecs RESULT =null;
		 RESULT = sem.no_lista_opt_decs(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_opt_declaraciones",2, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= lista_declaraciones PUNTOYCOMA declaracion 
            {
              LDecs RESULT =null;
		LDecs l_decs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchas_lista_decs(l_decs, dec); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaraciones ::= declaracion 
            {
              LDecs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.una_lista_decs(dec); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= declaracion_variable 
            {
              Dec RESULT =null;
		Dec dec_var = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = dec_var; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= declaracion_tipo 
            {
              Dec RESULT =null;
		Dec dec_tipo = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = dec_tipo; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= declaracion_proc 
            {
              Dec RESULT =null;
		Dec dec_proc = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = dec_proc; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_variable ::= tipo Identificador 
            {
              Dec RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_var(t,id.str()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion_variable",5, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_tipo ::= TYPE tipo Identificador 
            {
              Dec RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_tipo(t,id.str()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",6, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_proc ::= PROC Identificador INIPAR lista_opt_parametros_formales FINPAR bloque 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		LOptParamForm l_opt_param_form = (LOptParamForm)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Blq blq = (Blq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_proc(id.str(),l_opt_param_form,blq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion_proc",7, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_opt_parametros_formales ::= lista_parametros_formales 
            {
              LOptParamForm RESULT =null;
		LParamForm l_param_form = (LParamForm)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.si_lista_opt_param_form(l_param_form); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_opt_parametros_formales",8, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_opt_parametros_formales ::= 
            {
              LOptParamForm RESULT =null;
		 RESULT = sem.no_lista_opt_param_form(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_opt_parametros_formales",8, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_parametros_formales ::= lista_parametros_formales COMA parametro_formal 
            {
              LParamForm RESULT =null;
		LParamForm l_param_form = (LParamForm)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		ParamForm param_form = (ParamForm)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchas_lista_param_form(l_param_form, param_form); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros_formales",9, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_parametros_formales ::= parametro_formal 
            {
              LParamForm RESULT =null;
		ParamForm param_form = (ParamForm)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.una_lista_param_form(param_form); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros_formales",9, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro_formal ::= tipo REFERENCIA Identificador 
            {
              ParamForm RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.param_form_ref(t,id.str()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametro_formal",10, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametro_formal ::= tipo Identificador 
            {
              ParamForm RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.param_form(t,id.str()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametro_formal",10, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= tipo_array 
            {
              Tipo RESULT =null;
		Tipo t_arr = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = t_arr; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo",11, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_array ::= tipo_array INIARRAY Entero FINARRAY 
            {
              Tipo RESULT =null;
		Tipo t_arr = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = (Tipo)sem.tipo_array(t_arr,num.str()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_array",17, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_array ::= tipo_puntero 
            {
              Tipo RESULT =null;
		Tipo t_punt = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = t_punt; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_array",17, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_puntero ::= PUNTERO tipo_puntero 
            {
              Tipo RESULT =null;
		Tipo t_punt = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Tipo)sem.tipo_puntero(t_punt); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_puntero",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_puntero ::= T2 
            {
              Tipo RESULT =null;
		Tipo t2 = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = t2; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_puntero",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // T2 ::= tipo_basico 
            {
              Tipo RESULT =null;
		Tipo t_bas = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = t_bas; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("T2",15, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // T2 ::= tipo_registro 
            {
              Tipo RESULT =null;
		Tipo t_reg = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = t_reg; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("T2",15, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // T2 ::= tipo_definido 
            {
              Tipo RESULT =null;
		Tipo t_def = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = t_def; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("T2",15, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo_basico ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = (Tipo)sem.int_t(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_basico ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = (Tipo)sem.real_t(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_basico ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = (Tipo)sem.bool_t(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_basico ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = (Tipo)sem.string_t(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_basico",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_registro ::= STRUCT INIBLOQUE lista_parametros_registro FINBLOQUE 
            {
              Tipo RESULT =null;
		LParamReg l_param_reg = (LParamReg)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = (Tipo)sem.tipo_registro(l_param_reg); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_registro",13, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_definido ::= Identificador 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Tipo)sem.tipo_definido(id.str()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo_definido",12, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_parametros_registro ::= lista_parametros_registro COMA parametro_registro 
            {
              LParamReg RESULT =null;
		LParamReg l_param_reg = (LParamReg)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		ParamReg param_reg = (ParamReg)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchas_lista_param_reg(l_param_reg,param_reg); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros_registro",18, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_parametros_registro ::= parametro_registro 
            {
              LParamReg RESULT =null;
		ParamReg param_reg = (ParamReg)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.una_lista_param_reg(param_reg); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros_registro",18, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametro_registro ::= tipo Identificador 
            {
              ParamReg RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.param_reg(t,id.str()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametro_registro",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_opt_instrucciones ::= lista_instrucciones 
            {
              LOptInst RESULT =null;
		LInst l_inst = (LInst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.si_lista_opt_inst(l_inst); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_opt_instrucciones",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_opt_instrucciones ::= 
            {
              LOptInst RESULT =null;
		 RESULT = sem.no_lista_opt_inst(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_opt_instrucciones",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_instrucciones ::= lista_instrucciones PUNTOYCOMA instruccion 
            {
              LInst RESULT =null;
		LInst l_inst = (LInst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchas_lista_inst(l_inst,inst); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",21, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_instrucciones ::= instruccion 
            {
              LInst RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.una_lista_inst(inst); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",21, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= instruccion_eval 
            {
              Inst RESULT =null;
		Inst inst_eval = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = inst_eval; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= instruccion_if 
            {
              Inst RESULT =null;
		Inst inst_if = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = inst_if; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= instruccion_if_else 
            {
              Inst RESULT =null;
		Inst inst_if_else = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = inst_if_else; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= instruccion_while 
            {
              Inst RESULT =null;
		Inst inst_while = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = inst_while; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= instruccion_read 
            {
              Inst RESULT =null;
		Inst inst_read = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = inst_read; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= instruccion_write 
            {
              Inst RESULT =null;
		Inst inst_write = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = inst_write; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= instruccion_nl 
            {
              Inst RESULT =null;
		Inst inst_nl = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = inst_nl; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= instruccion_new 
            {
              Inst RESULT =null;
		Inst inst_new = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = inst_new; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion ::= instruccion_delete 
            {
              Inst RESULT =null;
		Inst inst_delete = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = inst_delete; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccion ::= instruccion_call 
            {
              Inst RESULT =null;
		Inst inst_call = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = inst_call; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccion ::= instruccion_compuesta 
            {
              Inst RESULT =null;
		Inst inst_compuesta = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = inst_compuesta; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccion_eval ::= ARROBA expresion 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Inst)sem.inst_eval(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_eval",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= E0 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("expresion",34, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E0 ::= E1 ASIGNACION E0 
            {
              Exp RESULT =null;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.asignacion(opnd1, opnd2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E0",35, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E0",35, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E1 ::= E1 OP1 E2 
            {
              Exp RESULT =null;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.mkop1(op, opnd1, opnd2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E1",36, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E1",36, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E2 ::= E2 MAS E3 
            {
              Exp RESULT =null;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.suma(opnd1, opnd2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E2",37, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E2 ::= E3 MENOS E3 
            {
              Exp RESULT =null;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.resta(opnd1, opnd2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E2",37, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E2",37, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E3 ::= E4 AND E3 
            {
              Exp RESULT =null;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.and(opnd1, opnd2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E3",38, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E3 ::= E4 OR E4 
            {
              Exp RESULT =null;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.or(opnd1, opnd2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E3",38, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E3",38, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E4 ::= E4 OP4 E5 
            {
              Exp RESULT =null;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.mkop4(op, opnd1, opnd2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E4",39, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E4",39, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E5 ::= OP5 E5 
            {
              Exp RESULT =null;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.mkop5(op, opnd1); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E5",40, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E5",40, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E6 ::= E6 INIARRAY E0 FINARRAY 
            {
              Exp RESULT =null;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.indexacion(opnd1, opnd2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E6",41, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E6 ::= E6 PUNTO Identificador 
            {
              Exp RESULT =null;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.acc_reg(opnd1, id.str()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E6",41, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E6 ::= E6 PUNTERO 
            {
              Exp RESULT =null;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.indireccion(opnd1); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E6",41, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E6",41, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= Entero 
            {
              Exp RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.lit_ent(num.str()).ponFila(num.fila()).ponCol(num.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E7 ::= Real 
            {
              Exp RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.lit_real(num.str()).ponFila(num.fila()).ponCol(num.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E7 ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = sem.true_e(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E7 ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = sem.false_e(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E7 ::= NULL 
            {
              Exp RESULT =null;
		 RESULT = sem.null_e(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E7 ::= Cadena 
            {
              Exp RESULT =null;
		StringLocalizado s = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.cadena(s.str()).ponFila(s.fila()).ponCol(s.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E7 ::= Identificador 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.iden(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E7 ::= INIPAR E0 FINPAR 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP1 ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP1",46, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP1 ::= MAYORIGUAL 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP1",46, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP1 ::= MENOR 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP1",46, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP1 ::= MENORIGUAL 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP1",46, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP1 ::= COMPARACION 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP1",46, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP1 ::= DISTINTO 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP1",46, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP4 ::= POR 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP4",47, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP4 ::= ENTRE 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP4",47, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP4 ::= MODULO 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP4",47, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP5 ::= NOT 
            {
              String RESULT =null;
		 RESULT = "not"; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP5",48, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP5 ::= MENOS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("OP5",48, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // instruccion_if ::= IF expresion bloque 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Blq blq = (Blq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.inst_if(exp, blq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_if",24, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // instruccion_if_else ::= IF expresion bloque ELSE bloque 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		Blq blq1 = (Blq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Blq blq2 = (Blq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.inst_if_else(exp, blq1, blq2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_if_else",25, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // instruccion_while ::= WHILE expresion bloque 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Blq blq = (Blq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.inst_while(exp, blq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_while",26, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // instruccion_read ::= READ expresion 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.inst_read(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_read",27, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // instruccion_write ::= WRITE expresion 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.inst_write(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_write",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // instruccion_nl ::= NL 
            {
              Inst RESULT =null;
		 RESULT = sem.inst_nl(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_nl",29, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // instruccion_new ::= NEW expresion 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.inst_new(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_new",30, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // instruccion_delete ::= DELETE expresion 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.inst_delete(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_delete",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // instruccion_call ::= CALL Identificador parametros 
            {
              Inst RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		LOptParam param = (LOptParam)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.inst_call(id.str(), param); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_call",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros ::= INIPAR lista_opt_parametros FINPAR 
            {
              LOptParam RESULT =null;
		LOptParam l_opt_param = (LOptParam)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = l_opt_param; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros",44, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lista_opt_parametros ::= lista_parametros 
            {
              LOptParam RESULT =null;
		LParam l_param = (LParam)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.si_lista_opt_param(l_param); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_opt_parametros",43, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_opt_parametros ::= 
            {
              LOptParam RESULT =null;
		 RESULT = sem.no_lista_opt_param(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_opt_parametros",43, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lista_parametros ::= lista_parametros COMA expresion 
            {
              LParam RESULT =null;
		LParam l_param = (LParam)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchas_lista_param(l_param, exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros",45, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_parametros ::= expresion 
            {
              LParam RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.una_lista_param(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros",45, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // instruccion_compuesta ::= bloque 
            {
              Inst RESULT =null;
		Blq blq = (Blq)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.inst_comp(blq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion_compuesta",33, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTTiny$do_action(
    int                        CUP$ConstructorASTTiny$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTTiny$parser,
    java.util.Stack            CUP$ConstructorASTTiny$stack,
    int                        CUP$ConstructorASTTiny$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTTiny$do_action_part00000000(
                               CUP$ConstructorASTTiny$act_num,
                               CUP$ConstructorASTTiny$parser,
                               CUP$ConstructorASTTiny$stack,
                               CUP$ConstructorASTTiny$top);
    }
}

