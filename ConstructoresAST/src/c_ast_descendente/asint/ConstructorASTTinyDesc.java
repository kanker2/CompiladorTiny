/* ConstructorASTTinyDesc.java */
/* Generated By:JavaCC: Do not edit this line. ConstructorASTTinyDesc.java */
package c_ast_descendente.asint;
import asint.ClaseSemanticaTiny;
import asint.SintaxisAbstractaTiny.ProgT;
import asint.SintaxisAbstractaTiny.Blq;
import asint.SintaxisAbstractaTiny.LOptDecs;
import asint.SintaxisAbstractaTiny.LDecs;
import asint.SintaxisAbstractaTiny.Dec;
import asint.SintaxisAbstractaTiny.LOptParamForm;
import asint.SintaxisAbstractaTiny.LParamForm;
import asint.SintaxisAbstractaTiny.ParamForm;
import asint.SintaxisAbstractaTiny.Tipo;
import asint.SintaxisAbstractaTiny.LParamReg;
import asint.SintaxisAbstractaTiny.ParamReg;
import asint.SintaxisAbstractaTiny.LOptInst;
import asint.SintaxisAbstractaTiny.LInst;
import asint.SintaxisAbstractaTiny.Inst;
import asint.SintaxisAbstractaTiny.Exp;
import asint.SintaxisAbstractaTiny.LOptParam;
import asint.SintaxisAbstractaTiny.LParam;
import c_ast_ascendente.alex.UnidadLexica.StringLocalizado;

public class ConstructorASTTinyDesc implements ConstructorASTTinyDescConstants {
    private ClaseSemanticaTiny sem = new ClaseSemanticaTiny();

  final public ProgT analiza() throws ParseException {
    trace_call("analiza");
    try {
ProgT prog;
      prog = programa_tiny();
      jj_consume_token(0);
{if ("" != null) return prog;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("analiza");
    }
}

  final public ProgT programa_tiny() throws ParseException {
    trace_call("programa_tiny");
    try {
Blq blq;
      blq = bloque();
{if ("" != null) return sem.prog_tiny(blq);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("programa_tiny");
    }
}

  final public Blq bloque() throws ParseException {
    trace_call("bloque");
    try {
LOptDecs l_opt_decs; LOptInst l_opt_inst;
      jj_consume_token(INIBLOQUE);
      l_opt_decs = lista_opt_declaraciones();
      l_opt_inst = lista_opt_instrucciones();
      jj_consume_token(FINBLOQUE);
{if ("" != null) return sem.bloque(l_opt_decs, l_opt_inst);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("bloque");
    }
}

  final public LOptDecs lista_opt_declaraciones() throws ParseException {
    trace_call("lista_opt_declaraciones");
    try {
LDecs l_decs;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case REAL:
      case BOOL:
      case STRING:
      case PROC:
      case STRUCT:
      case TYPE:
      case PUNTERO:
      case Identificador:{
        l_decs = lista_declaraciones();
        jj_consume_token(FINDECLARACIONES);
{if ("" != null) return sem.si_lista_opt_decs(l_decs);}
        break;
        }
      default:
        jj_la1[0] = jj_gen;
{if ("" != null) return sem.no_lista_opt_decs();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_opt_declaraciones");
    }
}

  final public LDecs lista_declaraciones() throws ParseException {
    trace_call("lista_declaraciones");
    try {
LDecs l_decs; Dec dec;
      dec = declaracion();
      l_decs = lista_decs(sem.una_lista_dec(dec));
{if ("" != null) return l_decs;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_declaraciones");
    }
}

  final public LDecs lista_decs(LDecs l_decsh) throws ParseException {
    trace_call("lista_decs");
    try {
Dec dec; LDecs l_decs;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUNTOYCOMA:{
        jj_consume_token(PUNTOYCOMA);
        dec = declaracion();
        l_decs = lista_decs(sem.muchas_lista_decs(l_decsh, dec));
{if ("" != null) return l_decs;}
        break;
        }
      default:
        jj_la1[1] = jj_gen;
{if ("" != null) return l_decsh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_decs");
    }
}

  final public Dec declaracion() throws ParseException {
    trace_call("declaracion");
    try {
Dec dec;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case REAL:
      case BOOL:
      case STRING:
      case STRUCT:
      case PUNTERO:
      case Identificador:{
        dec = declaracion_variable();
{if ("" != null) return dec;}
        break;
        }
      case TYPE:{
        dec = declaracion_tipo();
{if ("" != null) return dec;}
        break;
        }
      case PROC:{
        dec = declaracion_proc();
{if ("" != null) return dec;}
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracion");
    }
}

  final public Dec declaracion_variable() throws ParseException {
    trace_call("declaracion_variable");
    try {
Tipo tipo; Token t;
      tipo = tipo();
      t = jj_consume_token(Identificador);
{if ("" != null) return (Dec)sem.dec_var(tipo, t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracion_variable");
    }
}

  final public Dec declaracion_tipo() throws ParseException {
    trace_call("declaracion_tipo");
    try {
Tipo tipo; Token t;
      jj_consume_token(TYPE);
      tipo = tipo();
      t = jj_consume_token(Identificador);
{if ("" != null) return (Dec)sem.dec_tipo(tipo, t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracion_tipo");
    }
}

  final public Dec declaracion_proc() throws ParseException {
    trace_call("declaracion_proc");
    try {
Token t; LOptParamForm l_opt_param_form; Blq bloque;
      jj_consume_token(PROC);
      t = jj_consume_token(Identificador);
      jj_consume_token(INIPAR);
      l_opt_param_form = lista_opt_parametros_formales();
      jj_consume_token(FINPAR);
      bloque = bloque();
{if ("" != null) return (Dec)sem.dec_proc(t.image, l_opt_param_form, bloque).ponFila(t.beginLine).ponCol(t.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracion_proc");
    }
}

  final public LOptParamForm lista_opt_parametros_formales() throws ParseException {
    trace_call("lista_opt_parametros_formales");
    try {
LParamForm l_param_form;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case REAL:
      case BOOL:
      case STRING:
      case STRUCT:
      case PUNTERO:
      case Identificador:{
        l_param_form = lista_parametros_formales();
{if ("" != null) return sem.si_lista_opt_param_form(l_param_form);}
        break;
        }
      default:
        jj_la1[3] = jj_gen;
{if ("" != null) return sem.no_lista_opt_param_form();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_opt_parametros_formales");
    }
}

  final public LParamForm lista_parametros_formales() throws ParseException {
    trace_call("lista_parametros_formales");
    try {
ParamForm pf; LParamForm l_param_form;
      pf = parametro_formal();
      l_param_form = RECP(sem.una_lista_param_form(pf));
{if ("" != null) return l_param_form;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_parametros_formales");
    }
}

  final public LParamForm RECP(LParamForm l_param_formh) throws ParseException {
    trace_call("RECP");
    try {
ParamForm pf; LParamForm l_param_form;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        jj_consume_token(COMA);
        pf = parametro_formal();
        l_param_form = RECP(sem.muchas_lista_param_form(l_param_formh, pf));
{if ("" != null) return l_param_form;}
        break;
        }
      default:
        jj_la1[4] = jj_gen;
{if ("" != null) return l_param_formh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RECP");
    }
}

  final public ParamForm parametro_formal() throws ParseException {
    trace_call("parametro_formal");
    try {
Tipo tipo; ParamForm pf;
      tipo = tipo();
      pf = RECpf(tipo);
{if ("" != null) return pf;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parametro_formal");
    }
}

  final public ParamForm RECpf(Tipo th) throws ParseException {
    trace_call("RECpf");
    try {
Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REFERENCIA:{
        jj_consume_token(REFERENCIA);
        t = jj_consume_token(Identificador);
{if ("" != null) return (ParamForm) sem.param_form_ref(th, t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
        }
      case Identificador:{
        t = jj_consume_token(Identificador);
{if ("" != null) return (ParamForm) sem.param_form(th, t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RECpf");
    }
}

  final public Tipo tipo() throws ParseException {
    trace_call("tipo");
    try {
Tipo tipo;
      tipo = tipo_array();
{if ("" != null) return tipo;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo");
    }
}

  final public Tipo tipo_array() throws ParseException {
    trace_call("tipo_array");
    try {
Tipo tipo1, tipo2;
      tipo1 = tipo_puntero();
      tipo2 = RETA(tipo1);
{if ("" != null) return tipo2;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo_array");
    }
}

  final public Tipo RETA(Tipo tipoh) throws ParseException {
    trace_call("RETA");
    try {
Token t; Tipo tipo;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INIARRAY:{
        jj_consume_token(INIARRAY);
        t = jj_consume_token(Entero);
        jj_consume_token(FINARRAY);
        tipo = RETA((Tipo) sem.tipo_array(tipoh, t.image).ponFila(t.beginLine).ponCol(t.beginColumn));
{if ("" != null) return (Tipo) tipo;}
        break;
        }
      default:
        jj_la1[6] = jj_gen;
{if ("" != null) return tipoh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RETA");
    }
}

  final public Tipo tipo_puntero() throws ParseException {
    trace_call("tipo_puntero");
    try {
Tipo tipo;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUNTERO:{
        jj_consume_token(PUNTERO);
        tipo = tipo_puntero();
{if ("" != null) return sem.tipo_puntero(tipo);}
        break;
        }
      case INT:
      case REAL:
      case BOOL:
      case STRING:
      case STRUCT:
      case Identificador:{
        tipo = T2();
{if ("" != null) return tipo;}
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo_puntero");
    }
}

  final public Tipo T2() throws ParseException {
    trace_call("T2");
    try {
Tipo tipo;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case REAL:
      case BOOL:
      case STRING:{
        tipo = tipo_basico();
{if ("" != null) return tipo;}
        break;
        }
      case STRUCT:{
        tipo = tipo_registro();
{if ("" != null) return tipo;}
        break;
        }
      case Identificador:{
        tipo = tipo_definido();
{if ("" != null) return tipo;}
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("T2");
    }
}

  final public Tipo tipo_basico() throws ParseException {
    trace_call("tipo_basico");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
{if ("" != null) return sem.int_t();}
        break;
        }
      case REAL:{
        jj_consume_token(REAL);
{if ("" != null) return sem.real_t();}
        break;
        }
      case BOOL:{
        jj_consume_token(BOOL);
{if ("" != null) return sem.bool_t();}
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
{if ("" != null) return sem.string_t();}
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo_basico");
    }
}

  final public Tipo tipo_registro() throws ParseException {
    trace_call("tipo_registro");
    try {
LParamReg l_param_reg;
      jj_consume_token(STRUCT);
      jj_consume_token(INIBLOQUE);
      l_param_reg = lista_parametros_registro();
      jj_consume_token(FINBLOQUE);
{if ("" != null) return sem.tipo_registro(l_param_reg);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo_registro");
    }
}

  final public Tipo tipo_definido() throws ParseException {
    trace_call("tipo_definido");
    try {
Token t;
      t = jj_consume_token(Identificador);
{if ("" != null) return (Tipo) sem.tipo_definido(t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo_definido");
    }
}

  final public LParamReg lista_parametros_registro() throws ParseException {
    trace_call("lista_parametros_registro");
    try {
ParamReg param_reg; LParamReg l_param_reg;
      param_reg = parametro_registro();
      l_param_reg = REClpr(sem.una_lista_param_reg(param_reg));
{if ("" != null) return l_param_reg;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_parametros_registro");
    }
}

  final public LParamReg REClpr(LParamReg l_param_regh) throws ParseException {
    trace_call("REClpr");
    try {
ParamReg param_reg; LParamReg l_param_reg;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        jj_consume_token(COMA);
        param_reg = parametro_registro();
        l_param_reg = REClpr(sem.muchas_lista_param_reg(l_param_regh, param_reg));
{if ("" != null) return l_param_reg;}
        break;
        }
      default:
        jj_la1[10] = jj_gen;
{if ("" != null) return l_param_regh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("REClpr");
    }
}

  final public ParamReg parametro_registro() throws ParseException {
    trace_call("parametro_registro");
    try {
Tipo tipo; Token t;
      tipo = tipo();
      t = jj_consume_token(Identificador);
{if ("" != null) return (ParamReg) sem.param_reg(tipo, t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parametro_registro");
    }
}

  final public LOptInst lista_opt_instrucciones() throws ParseException {
    trace_call("lista_opt_instrucciones");
    try {
LInst l_inst;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case NEW:
      case DELETE:
      case READ:
      case WRITE:
      case NL:
      case CALL:
      case INIBLOQUE:
      case ARROBA:{
        l_inst = lista_instrucciones();
{if ("" != null) return sem.si_lista_opt_inst(l_inst);}
        break;
        }
      default:
        jj_la1[11] = jj_gen;
{if ("" != null) return sem.no_lista_opt_inst();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_opt_instrucciones");
    }
}

  final public LInst lista_instrucciones() throws ParseException {
    trace_call("lista_instrucciones");
    try {
Inst inst; LInst l_inst;
      inst = instruccion();
      l_inst = RECI(sem.una_lista_inst(inst));
{if ("" != null) return l_inst;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_instrucciones");
    }
}

  final public LInst RECI(LInst l_insth) throws ParseException {
    trace_call("RECI");
    try {
Inst inst; LInst l_inst;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUNTOYCOMA:{
        jj_consume_token(PUNTOYCOMA);
        inst = instruccion();
        l_inst = RECI(sem.muchas_lista_inst(l_insth, inst));
{if ("" != null) return l_inst;}
        break;
        }
      default:
        jj_la1[12] = jj_gen;
{if ("" != null) return l_insth;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RECI");
    }
}

  final public Inst instruccion() throws ParseException {
    trace_call("instruccion");
    try {
Inst inst;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARROBA:{
        inst = instruccion_eval();
{if ("" != null) return inst;}
        break;
        }
      case IF:{
        inst = fact_if();
{if ("" != null) return inst;}
        break;
        }
      case WHILE:{
        inst = instruccion_while();
{if ("" != null) return inst;}
        break;
        }
      case READ:{
        inst = instruccion_read();
{if ("" != null) return inst;}
        break;
        }
      case WRITE:{
        inst = instruccion_write();
{if ("" != null) return inst;}
        break;
        }
      case NL:{
        inst = instruccion_nl();
{if ("" != null) return inst;}
        break;
        }
      case NEW:{
        inst = instruccion_new();
{if ("" != null) return inst;}
        break;
        }
      case DELETE:{
        inst = instruccion_delete();
{if ("" != null) return inst;}
        break;
        }
      case CALL:{
        inst = instruccion_call();
{if ("" != null) return inst;}
        break;
        }
      case INIBLOQUE:{
        inst = instruccion_compuesta();
{if ("" != null) return inst;}
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion");
    }
}

  final public Inst instruccion_eval() throws ParseException {
    trace_call("instruccion_eval");
    try {
Exp exp;
      jj_consume_token(ARROBA);
      exp = expresion();
{if ("" != null) return sem.inst_eval(exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_eval");
    }
}

  final public Exp expresion() throws ParseException {
    trace_call("expresion");
    try {
Exp e;
      e = E0();
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expresion");
    }
}

  final public Exp E0() throws ParseException {
    trace_call("E0");
    try {
Exp e1, e2;
      e1 = E1();
      e2 = FE0(e1);
{if ("" != null) return e2;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E0");
    }
}

  final public Exp FE0(Exp eh) throws ParseException {
    trace_call("FE0");
    try {
Token t; Exp e;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASIGNACION:{
        t = jj_consume_token(ASIGNACION);
        e = E0();
{if ("" != null) return (Exp) sem.asignacion(eh, e).ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
        }
      default:
        jj_la1[14] = jj_gen;
{if ("" != null) return eh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FE0");
    }
}

  final public Exp E1() throws ParseException {
    trace_call("E1");
    try {
Exp e1, e2;
      e1 = E2();
      e2 = RE1(e1);
{if ("" != null) return e2;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E1");
    }
}

  final public Exp RE1(Exp eh) throws ParseException {
    trace_call("RE1");
    try {
StringLocalizado op; Exp e1, e2;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MENOR:
      case MENORIGUAL:
      case MAYOR:
      case MAYORIGUAL:
      case COMPARACION:
      case DISTINTO:{
        op = OP1();
        e1 = E2();
        e2 = RE1((Exp) sem.mkop1(op.str(), eh, e1).ponFila(op.fila()).ponCol(op.col()));
{if ("" != null) return (Exp) e2;}
        break;
        }
      default:
        jj_la1[15] = jj_gen;
{if ("" != null) return eh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RE1");
    }
}

  final public Exp E2() throws ParseException {
    trace_call("E2");
    try {
Exp e1, e2, e3;
      e1 = E3();
      e2 = FE2(e1);
      e3 = RE2(e2);
{if ("" != null) return e3;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E2");
    }
}

  final public Exp RE2(Exp eh) throws ParseException {
    trace_call("RE2");
    try {
Token t; Exp e1, e2;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:{
        t = jj_consume_token(MAS);
        e1 = E3();
        e2 = RE2(sem.suma(eh, e1));
{if ("" != null) return (Exp) e2.ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
        }
      default:
        jj_la1[16] = jj_gen;
{if ("" != null) return eh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RE2");
    }
}

  final public Exp FE2(Exp eh) throws ParseException {
    trace_call("FE2");
    try {
Token t; Exp e;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MENOS:{
        t = jj_consume_token(MENOS);
        e = E3();
{if ("" != null) return (Exp) sem.resta(eh, e).ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
        }
      default:
        jj_la1[17] = jj_gen;
{if ("" != null) return eh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FE2");
    }
}

  final public Exp E3() throws ParseException {
    trace_call("E3");
    try {
Exp e1, e2;
      e1 = E4();
      e2 = FE3(e1);
{if ("" != null) return e2;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E3");
    }
}

  final public Exp FE3(Exp eh) throws ParseException {
    trace_call("FE3");
    try {
Token t; Exp e;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        t = jj_consume_token(AND);
        e = E3();
{if ("" != null) return (Exp) sem.and(eh, e).ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
        }
      case OR:{
        t = jj_consume_token(OR);
        e = E4();
{if ("" != null) return (Exp) sem.or(eh, e).ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
        }
      default:
        jj_la1[18] = jj_gen;
{if ("" != null) return eh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FE3");
    }
}

  final public Exp E4() throws ParseException {
    trace_call("E4");
    try {
Exp e1, e2;
      e1 = E5();
      e2 = RE4(e1);
{if ("" != null) return e2;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E4");
    }
}

  final public Exp RE4(Exp eh) throws ParseException {
    trace_call("RE4");
    try {
StringLocalizado op; Exp e1, e2;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case POR:
      case ENTRE:
      case MODULO:{
        op = OP4();
        e1 = E5();
        e2 = RE4((Exp) sem.mkop4(op.str(), eh, e1).ponFila(op.fila()).ponCol(op.col()));
{if ("" != null) return (Exp) e2;}
        break;
        }
      default:
        jj_la1[19] = jj_gen;
{if ("" != null) return eh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RE4");
    }
}

  final public Exp E5() throws ParseException {
    trace_call("E5");
    try {
StringLocalizado op; Exp e;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:
      case MENOS:{
        op = OP5();
        e = E5();
{if ("" != null) return (Exp) sem.mkop5(op.str(), e).ponFila(op.fila()).ponCol(op.col());}
        break;
        }
      case NULL:
      case TRUE:
      case FALSE:
      case INIPAR:
      case Identificador:
      case Entero:
      case Real:
      case Cadena:{
        e = E6();
{if ("" != null) return e;}
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E5");
    }
}

  final public Exp E6() throws ParseException {
    trace_call("E6");
    try {
Exp e1, e2;
      e1 = E7();
      e2 = RE6(e1);
{if ("" != null) return e2;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E6");
    }
}

  final public Exp RE6(Exp eh) throws ParseException {
    trace_call("RE6");
    try {
Exp e1, e2; Token t, op;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INIARRAY:{
        op = jj_consume_token(INIARRAY);
        e1 = E0();
        jj_consume_token(FINARRAY);
        e2 = RE6((Exp) sem.indexacion(eh, e1).ponFila(op.beginLine).ponCol(op.beginColumn));
{if ("" != null) return (Exp) e2;}
        break;
        }
      case PUNTO:{
        jj_consume_token(PUNTO);
        t = jj_consume_token(Identificador);
        e1 = RE6((Exp) sem.acc_reg(eh, t.image).ponFila(t.beginLine).ponCol(t.beginColumn));
{if ("" != null) return (Exp) e1;}
        break;
        }
      case PUNTERO:{
        op = jj_consume_token(PUNTERO);
        e1 = RE6((Exp) sem.indireccion(eh).ponFila(op.beginLine).ponCol(op.beginColumn));
{if ("" != null) return (Exp) e1;}
        break;
        }
      default:
        jj_la1[21] = jj_gen;
{if ("" != null) return eh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RE6");
    }
}

  final public Exp E7() throws ParseException {
    trace_call("E7");
    try {
Exp e; Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Entero:{
        t = jj_consume_token(Entero);
{if ("" != null) return (Exp)sem.lit_ent(t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
        }
      case Real:{
        t = jj_consume_token(Real);
{if ("" != null) return (Exp)sem.lit_real(t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
        }
      case TRUE:{
        t = jj_consume_token(TRUE);
{if ("" != null) return (Exp)sem.true_e().ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
        }
      case FALSE:{
        t = jj_consume_token(FALSE);
{if ("" != null) return (Exp)sem.false_e().ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
        }
      case NULL:{
        t = jj_consume_token(NULL);
{if ("" != null) return (Exp)sem.null_e().ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
        }
      case Cadena:{
        t = jj_consume_token(Cadena);
{if ("" != null) return (Exp)sem.cadena(t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
        }
      case Identificador:{
        t = jj_consume_token(Identificador);
{if ("" != null) return (Exp)sem.iden(t.image).ponFila(t.beginLine).ponCol(t.beginColumn);}
        break;
        }
      case INIPAR:{
        jj_consume_token(INIPAR);
        e = E0();
        jj_consume_token(FINPAR);
{if ("" != null) return e;}
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E7");
    }
}

  final public StringLocalizado OP1() throws ParseException {
    trace_call("OP1");
    try {
Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAYOR:{
        t = jj_consume_token(MAYOR);
{if ("" != null) return new StringLocalizado(t.image, t.beginLine, t.beginColumn);}
        break;
        }
      case MAYORIGUAL:{
        t = jj_consume_token(MAYORIGUAL);
{if ("" != null) return new StringLocalizado(t.image, t.beginLine, t.beginColumn);}
        break;
        }
      case MENOR:{
        t = jj_consume_token(MENOR);
{if ("" != null) return new StringLocalizado(t.image, t.beginLine, t.beginColumn);}
        break;
        }
      case MENORIGUAL:{
        t = jj_consume_token(MENORIGUAL);
{if ("" != null) return new StringLocalizado(t.image, t.beginLine, t.beginColumn);}
        break;
        }
      case COMPARACION:{
        t = jj_consume_token(COMPARACION);
{if ("" != null) return new StringLocalizado(t.image, t.beginLine, t.beginColumn);}
        break;
        }
      case DISTINTO:{
        t = jj_consume_token(DISTINTO);
{if ("" != null) return new StringLocalizado(t.image, t.beginLine, t.beginColumn);}
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("OP1");
    }
}

  final public StringLocalizado OP4() throws ParseException {
    trace_call("OP4");
    try {
Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case POR:{
        t = jj_consume_token(POR);
{if ("" != null) return new StringLocalizado(t.image, t.beginLine, t.beginColumn);}
        break;
        }
      case ENTRE:{
        t = jj_consume_token(ENTRE);
{if ("" != null) return new StringLocalizado(t.image, t.beginLine, t.beginColumn);}
        break;
        }
      case MODULO:{
        t = jj_consume_token(MODULO);
{if ("" != null) return new StringLocalizado(t.image, t.beginLine, t.beginColumn);}
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("OP4");
    }
}

  final public StringLocalizado OP5() throws ParseException {
    trace_call("OP5");
    try {
Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        t = jj_consume_token(NOT);
{if ("" != null) return new StringLocalizado("not", t.beginLine, t.beginColumn);}
        break;
        }
      case MENOS:{
        t = jj_consume_token(MENOS);
{if ("" != null) return new StringLocalizado(t.image, t.beginLine, t.beginColumn);}
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("OP5");
    }
}

  final public Inst fact_if() throws ParseException {
    trace_call("fact_if");
    try {
Blq b; Exp e; Inst inst;
      jj_consume_token(IF);
      e = expresion();
      b = bloque();
      inst = parte_else(e, b);
{if ("" != null) return inst;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("fact_if");
    }
}

  final public Inst parte_else(Exp eh, Blq bh) throws ParseException {
    trace_call("parte_else");
    try {
Blq b;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        b = bloque();
{if ("" != null) return sem.inst_if_else(eh, bh, b);}
        break;
        }
      default:
        jj_la1[26] = jj_gen;
{if ("" != null) return sem.inst_if(eh, bh);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parte_else");
    }
}

  final public Inst instruccion_while() throws ParseException {
    trace_call("instruccion_while");
    try {
Exp e; Blq bloque;
      jj_consume_token(WHILE);
      e = expresion();
      bloque = bloque();
{if ("" != null) return sem.inst_while(e, bloque);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_while");
    }
}

  final public Inst instruccion_read() throws ParseException {
    trace_call("instruccion_read");
    try {
Exp e;
      jj_consume_token(READ);
      e = expresion();
{if ("" != null) return sem.inst_read(e);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_read");
    }
}

  final public Inst instruccion_write() throws ParseException {
    trace_call("instruccion_write");
    try {
Exp e;
      jj_consume_token(WRITE);
      e = expresion();
{if ("" != null) return sem.inst_write(e);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_write");
    }
}

  final public Inst instruccion_nl() throws ParseException {
    trace_call("instruccion_nl");
    try {

      jj_consume_token(NL);
{if ("" != null) return sem.inst_nl();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_nl");
    }
}

  final public Inst instruccion_new() throws ParseException {
    trace_call("instruccion_new");
    try {
Exp e;
      jj_consume_token(NEW);
      e = expresion();
{if ("" != null) return sem.inst_new(e);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_new");
    }
}

  final public Inst instruccion_delete() throws ParseException {
    trace_call("instruccion_delete");
    try {
Exp e;
      jj_consume_token(DELETE);
      e = expresion();
{if ("" != null) return sem.inst_delete(e);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_delete");
    }
}

  final public Inst instruccion_call() throws ParseException {
    trace_call("instruccion_call");
    try {
LOptParam l_opt_param; Token t;
      jj_consume_token(CALL);
      t = jj_consume_token(Identificador);
      l_opt_param = parametros();
{if ("" != null) return (Inst) sem.inst_call(t.image, l_opt_param).ponFila(t.beginLine).ponCol(t.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_call");
    }
}

  final public LOptParam parametros() throws ParseException {
    trace_call("parametros");
    try {
LOptParam l_opt_param;
      jj_consume_token(INIPAR);
      l_opt_param = lista_opt_parametros();
      jj_consume_token(FINPAR);
{if ("" != null) return l_opt_param;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parametros");
    }
}

  final public LOptParam lista_opt_parametros() throws ParseException {
    trace_call("lista_opt_parametros");
    try {
LParam l_param;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:
      case NULL:
      case TRUE:
      case FALSE:
      case MENOS:
      case INIPAR:
      case Identificador:
      case Entero:
      case Real:
      case Cadena:{
        l_param = lista_parametros();
{if ("" != null) return sem.si_lista_opt_param(l_param);}
        break;
        }
      default:
        jj_la1[27] = jj_gen;
{if ("" != null) return sem.no_lista_opt_param();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_opt_parametros");
    }
}

  final public LParam lista_parametros() throws ParseException {
    trace_call("lista_parametros");
    try {
Exp e; LParam l_param;
      e = expresion();
      l_param = REClp(sem.una_lista_param(e));
{if ("" != null) return l_param;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_parametros");
    }
}

  final public LParam REClp(LParam l_paramh) throws ParseException {
    trace_call("REClp");
    try {
Exp e; LParam l_param;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        jj_consume_token(COMA);
        e = expresion();
        l_param = REClp(sem.muchas_lista_param(l_paramh, e));
{if ("" != null) return l_param;}
        break;
        }
      default:
        jj_la1[28] = jj_gen;
{if ("" != null) return l_paramh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("REClp");
    }
}

  final public Inst instruccion_compuesta() throws ParseException {
    trace_call("instruccion_compuesta");
    try {
Blq bloque;
      bloque = bloque();
{if ("" != null) return sem.inst_comp(bloque);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_compuesta");
    }
}

  /** Generated Token Manager. */
  public ConstructorASTTinyDescTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x20881e00,0x0,0x20881e00,0x801e00,0x0,0x0,0x0,0x801e00,0x801e00,0x1e00,0x0,0x5f500000,0x0,0x5f500000,0x0,0x0,0x0,0x0,0x6000,0x80000000,0x78000,0x0,0x70000,0x0,0x80000000,0x8000,0x200000,0x78000,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x1080000,0x10000,0x1080000,0x1080000,0x200000,0x1400000,0x20000,0x1080000,0x1000000,0x0,0x200000,0x5000,0x10000,0x5000,0x200,0x1f8,0x2,0x4,0x0,0x100001,0xf000404,0x8a0000,0xf000400,0x1f8,0x100001,0x4,0x0,0xf000404,0x200000,};
	}

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public ConstructorASTTinyDesc(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ConstructorASTTinyDesc(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ConstructorASTTinyDescTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ConstructorASTTinyDesc(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ConstructorASTTinyDescTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ConstructorASTTinyDescTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ConstructorASTTinyDesc(ConstructorASTTinyDescTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ConstructorASTTinyDescTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[60];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 29; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 60; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  private int trace_indent = 0;
/** Enable tracing. */
  final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
	 trace_enabled = false;
  }

  protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

}
