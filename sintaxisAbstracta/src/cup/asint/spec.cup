package asint;

import java_cup.runtime.*;
import cup.alex.AnalizadorLexicoTiny;
import cup.alex.UnidadLexica;
import cup.errors.GestionErroresTiny;

scan with {: 
  return getScanner().next_token(); 
:};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};
action code {:
  ClaseSemanticaEval sem = new ClaseSemanticaEval();
:}

terminal INIBLOQUE, FINBLOQUE, FINDECLARACIONES, PUNTOYCOMA, PUNTO, INIPAR, FINPAR, INIARRAY, FINARRAY, PUNTERO, REFERENCIA, COMA, ARROBA, MAYOR, MAYORIGUAL, MENOR, MENORIGUAL, COMPARACION, DISTINTO, ASIGNACION, POR, ENTRE, AND, OR, MODULO, NOT, MAS, MENOS, IF, ELSE, WHILE, READ, WRITE, NL, NEW, DELETE, CALL, INT, REAL, BOOL, STRING, STRUCT, TYPE, PROC, TRUE, FALSE, NULL, Identificador, Entero, Real, Cadena;   

non terminal  ProgT programa_tiny;
non terminal  Blq bloque;
non terminal  LOptDecs lista_opt_declaraciones;
non terminal  LDecs lista_declaraciones;
non terminal  Dec declaracion, declaracion_variable, declaracion_tipo, declaracion_proc;
non terminal  LOptParamForm lista_opt_parametros_formales;
non terminal  LParamForm lista_parametros_formales;
non terminal  ParamForm parametro_formal;
non terminal  Tipo tipo, tipo_definido, tipo_ registro, tipo_basico, T2, tipo_puntero, tipo_array;
non terminal  LParamReg lista_parametros_registro;
non terminal  ParamReg parametro_registro;
non terminal  LOptInst lista_opt_instrucciones;
non terminal  LInst lista_instrucciones;
non terminal  Inst instruccion, instruccion_eval, instruccion_if, instruccion_if_else, instruccion_while, instrucci√≥n_read, instruccion_write, instruccion_nl, instruccion_new, instruccion_delete, instruccion_call, instruccion_compuesta;
non terminal  Exp expresion, E0, E1, E2, E3, E4, E5, E6, E7;
non terminal  LOptParam lista_opt_parametros;
non terminal  LParam lista_parametros;


programa_tiny ::= bloque: blq ;
	{: RESULT = sem.prog_tiny(blq); :};
bloque ::= INIBLOQUE lista_opt_declaraciones: l_opt_dec lista_opt_instrucciones: l_opt_inst FINBLOQUE ;
	{: RESULT = sem.bloque(l_opt_dec,l_opt_inst) :};

lista_opt_declaraciones ::= lista_declaraciones: l_decs FINDECLARACIONES ;
	{: RESULT = si_lista_opt_decs(l_decs); :};
lista_opt_declaraciones ::= ;
	{: RESULT = no_lista_opt_decs(); :};

lista_declaraciones ::= lista_declaraciones: l_decs PUNTOYCOMA declaracion: dec ;
	{: RESULT = muchas_lista_decs(l_decs, dec); :};
lista_declaraciones ::= declaracion: dec ;
	{: RESULT = una_lista_decs(dec); :};

declaracion ::= declaracion_variable: dec_var ;
	{: RESULT = dec_var; :};
declaracion ::= declaracion_tipo: dec_tipo ;
	{: RESULT = dec_tipo; :};
declaracion ::= declaracion_proc: dec_proc ;
	{: RESULT = dec_proc; :};

declaracion_variable ::= tipo: t Identificador: id ;
	{: RESULT = dec_var(t,id); :};
declaracion_tipo ::= TYPE tipo: t Identificador: id ;
	{: RESULT = dec_tipo(t,id); :};
declaracion_proc ::= cabecera_proc bloque ;
cabecera_proc ::= PROC Identificador INIPAR lista_opt_parametros_formales FINPAR; 

lista_opt_parametros_formales ::= lista_parametros_formales ;
lista_opt_parametros_formales ::= ;

lista_parametros_formales ::= lista_parametros_formales COMA parametro_formal ;
lista_parametros_formales ::= parametro_formal ;

parametro_formal ::= tipo REFERENCIA Identificador ;
parametro_formal ::= tipo Identificador ;

tipo ::= tipo_array ;
tipo_array ::= tipo_array INIARRAY Entero FINARRAY ;
tipo_array ::= tipo_puntero ;

tipo_puntero ::= PUNTERO tipo_puntero ;
tipo_puntero ::= T2 ;

T2 ::= tipo_basico ;
T2 ::= tipo_registro ;
T2 ::= tipo_definido ;

tipo_basico ::= INT ;
tipo_basico ::= REAL ;
tipo_basico ::= BOOL ;
tipo_basico ::= STRING ;
tipo_registro ::= STRUCT INIBLOQUE lista_opt_parametros_registro FINBLOQUE ;
tipo_definido ::= Identificador ;

lista_opt_parametros_registro ::= lista_parametros_registro ;
lista_opt_parametros_registro ::= ;

lista_parametros_registro ::= lista_parametros_registro COMA  parametro_registro ;
lista_parametros_registro ::= parametro_registro ;

parametro_registro ::= tipo Identificador ;

lista_opt_instrucciones ::= lista_instrucciones ;
lista_opt_instrucciones ::= ;

lista_instrucciones ::= lista_instrucciones PUNTOYCOMA instruccion ;
lista_instrucciones ::= instruccion ;


instruccion ::= instruccion_eval ;
instruccion ::= instruccion_if ;
instruccion ::= instruccion_while ;
instruccion ::= instruccion_read ;
instruccion ::= instruccion_write ;
instruccion ::= instruccion_nl ;
instruccion ::= instruccion_new ;
instruccion ::= instruccion_delete ;
instruccion ::= instruccion_call ;
instruccion ::= instruccion_compuesta ;

instruccion_eval ::= ARROBA expresion ; 

expresion ::= E0 ;

E0 ::= E1 ASIGNACION E0 ;
E0 ::= E1;

E1 ::= E1 OP1 E2 ;
E1 ::= E2 ;

E2 ::= E2 MAS E3 ;
E2 ::= E3 MENOS E3 ;
E2 ::= E3 ;

E3 ::= E4 AND E3 ;
E3 ::= E4 OR E4 ;
E3 ::= E4 ;

E4 ::= E4 OP4 E5 ;
E4 ::= E5 ;

E5 ::= OP5 E5 ;
E5 ::= E6 ;

E6 ::= E6 OP6 ;
E6 ::= E7 ;

E7 ::= Entero ;
E7 ::= Real ;
E7 ::= TRUE ;
E7 ::= FALSE ;
E7 ::= NULL ;
E7 ::= Cadena ;
E7 ::= Identificador ;
E7 ::= INIPAR E0 FINPAR ;

OP1 ::= MAYOR ;
OP1 ::= MAYORIGUAL ;
OP1 ::= MENOR ;
OP1 ::= MENORIGUAL ;
OP1 ::= COMPARACION ;
OP1 ::= DISTINTO ;

OP4 ::= POR ;
OP4 ::= ENTRE ;
OP4 ::= MODULO ;

OP5 ::= NOT ;
OP5 ::= MENOS ;

OP6 ::= INIARRAY E0 FINARRAY ;
OP6 ::= PUNTO Identificador ;
OP6 ::= PUNTERO ;

instruccion_if ::= IF expresion bloque instruccion_else ;
instruccion_else ::= ELSE bloque ;
instruccion_else ::= ;               
instruccion_while ::= WHILE expresion bloque ;
instruccion_read ::= READ expresion ;
instruccion_write ::= WRITE expresion ;
instruccion_nl ::= NL ;
instruccion_new ::= NEW expresion ;
instruccion_delete ::= DELETE expresion ;
instruccion_call ::= CALL Identificador parametros ;

parametros ::= INIPAR lista_opt_parametros FINPAR ;

lista_opt_parametros ::= lista_parametros ;
lista_opt_parametros ::= ;               


lista_parametros ::= lista_parametros COMA expresion ;
lista_parametros ::= expresion ;


instruccion_compuesta ::= bloque ;

